#!/bin/csh -e 
if ($#argv == 0) then
   echo ' '
   echo ' Make FONDA'
   echo ' '
   echo ' useage:'
   echo ' '
   echo '   make_fonda target_dir   [note: target_dir must be absolute, not relative path]'
   echo ' '
   echo ' example:'
   echo ' '
   echo '   make_fonda ~/gg/fonda '
   echo ' '
   echo ' will make the standard set of programs in ~/gg/fonda'
   echo ' It will also make links in ~/gg/fonda/bin' 
   echo ' '
   exit
else

#
# Script to make FONDA
# Augment the path to point to target-directory com for new installations
 set path = ($path $1/com)


# remember current working directory
set TARGETDIR = ($1)
set COMPILER = 'default'
if ( $#argv > 1 ) then
  set COMPILER = $2
  echo "Using the specified compiler: " $COMPILER 
endif


# document your actions

if (-e $TARGETDIR/installation.out) then
   date >> $TARGETDIR/installation.out
else
   date > $TARGETDIR/installation.out
endif

# Do the libraries first

echo ' '
echo '+++++++++++++++++++++++++++++++++++++++++'
echo 'Making /com (library) ...'
echo '+++++++++++++++++++++++++++++++++++++++++'


unimake -m com -c $COMPILER      
if( $status != 0 ) then
  echo "Failure in unimake for fonda/com -- make_fonda terminated"   
  exit 1
endif
cd com; make 

echo " "
echo ++++++++++++++++++++++++++++++++++
echo Making the main modules
echo ++++++++++++++++++++++++++++++++++
echo " "
     
# list of modules to make
# comment out you don't want to make
set MODULES = " "
set MODULES = ($MODULES kfcomlib)
set MODULES = ($MODULES maked)
set MODULES = ($MODULES solvem)
set MODULES = ($MODULES utility)  
set MODULES = ($MODULES help)


# loop over all modules
foreach DIRECTORY ( $MODULES ) 
   if (-e $TARGETDIR/$DIRECTORY) then 
#     first remake the Makefile if necessary
      cd $TARGETDIR
      unimake -m $DIRECTORY -c $COMPILER   
      if( $status != 0 ) then
        echo "Failure in unimake for fonda/" $DIRECTORY " -- make_fonda terminated"   
        exit 1
      endif
#     now make the module
      cd $DIRECTORY 
      make               
      if( $status != 0 ) then
        echo "Failure in make for fonda/" $DIRECTORY " -- make_fonda terminated"   
        exit 1
      endif
      echo Made $DIRECTORY    
#     need to erase object files on some systems (e.g., DEC OSF4) when it
#     can't be done within the Makefile.  
      touch tmp.o; \rm -f *.o
   else
      echo Could not find directory $TARGETDIR/$DIRECTORY
      exit 1 
   endif
end # for

echo " "
echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
echo Remaking the links from ../bin to the executables
echo ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
echo " "


# Now remake the links

if (-e $TARGETDIR/bin) then
   echo WARNING: $TARGETDIR/bin already exists.  Overwriting links...
else
   mkdir $TARGETDIR/bin
endif

cd $TARGETDIR/bin


\rm -f  align_frame   ; ln -s  ../utility/align_frame .
\rm -f  arc           ; ln -s  ../../gamit/arc/arc .
\rm -f  compare_coor  ; ln -s  ../utility/compare_coor . 
\rm -f  fonda         ; ln -s  ../help/fonda .
\rm -f  get_line      ; ln -s  ../utility/get_line .
\rm -f  get_v_rel     ; ln -s  ../utility/get_v_rel .
\rm -f  get_v_rel     ; ln -s  ../utility/get_v_rel .
\rm -f  history.note  ; ln -s  ../utility/history.note .
\rm -f  maked         ; ln -s  ../maked/maked .
\rm -f  net_update    ; ln -s  ../utility/net_update .
\rm -f  plot_line     ; ln -s  ../utility/plot_line .
\rm -f  solvem         ; ln -s  ../solvem/solvem .
                                                           
echo Made links >> $TARGETDIR/installation.out

echo ''
echo ++++++++++++++++++++++++++++++++++++++++
echo Sucessfully made FONDA and created links
echo ++++++++++++++++++++++++++++++++++++++++
echo ''
echo ''
echo =======================================================
echo 'Please set environmental variable FONDA_H to ~/gg/fonda'
echo =======================================================
echo ''
echo ''


endif
