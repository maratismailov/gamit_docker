#!/bin/csh -f

# Null input or help
if ( $#argv == 0 || "$argv" =~ '*-h*' || "$argv" !~ '*-f*' ) then
  cat << END && exit
12345678901234567890123456789012345678901234567890123456789012345678901234567890

  Program:     sh_plot_track
  Written by:  Michael A Floyd
  Last edited: Michael A Floyd (2011/10/14, MIT)

  Usage: sh_plot_track -f <track output NEU, DHU or XYZ file> <options>

  Options:
    -t1 <start> : Specify start time for plotting (should be expressed in
                  YYYYMMDDhhmmss format, e.g. 20110615171700)
    -t2 <end>   : Specify end time for plotting (should be expressed in
                  YYYYMMDDhhmmss format, e.g. 20110615171700)
    -ta #[h|m|s] : time-axis (time series) or position (map) annotation interval
                   (for GMT's "-B" option)

  Options specific to plotting time series:
    -km : plot in km (useful for car or flight data)
    -mm : plot in mm (useful for antenna collapses or GPS seismology)
    -rmean [y(es)|w(eighted)|n(o)] : Remove mean before plotting? (default = n)
    -tf #[h|m|s] : time-axis frame interval (for GMT's "-B" option)
    -tg #[h|m|s] : time-axis grid interval (for GMT's "-B" option)
    -eb : leave space for error bars when plotting
    -a : plot atmospheric delay time series
    -d [format] : specify date format (for GMT's PLOT_DATE_FORMAT)
                  (default = yyyy-mm-dd)
    -t [format] : specify time format (for GMT's PLOT_CLOCK_FORMAT)
                  (default = hh:mm:ss)
    -s [sigma limit] : Do not plot point with 1-sigma greater than [sigma limit]
                       (expressed in same units as plot). If one number is
                       specified, it is applied to all components; if two numbers
                       are specified, they are assumed to be (1) horizontal and
                       (2) vertical sigma limits; if three numbers are given,
                       they are assumed to be the sigma limits for the three
                       components (N,E,U or X,Y,Z)
    -ex : Plot excluded points (e.g. with "-s" option) in gray

  Options specific to plotting map view:
    -map : plot in map view
    -c : colour-code track heights (implies -map)

  Description: sh_plot_track takes the output from track run and plots the time
               series (default) or a map. The script will recognise the format
               of the coordinates in the file (e.g. NEU, DHU or XYZ) and plot
               the data and label the axes accordingly. If a map is plotted, the
               -ta option adds time-stamp annotations to positions at the
               specified interval (default is no annotations).

               The arguments for the -ta, -tf, -tg, -t and -d options are
               compatible with GMT. For example, to plot annotations every hour
               using the format "14:00", "15:00", etc., use "-ta 1H -t hh:mm".
               See gmtdefaults and psbasemap for more details.

12345678901234567890123456789012345678901234567890123456789012345678901234567890
END
endif

#if ( -f gmt.conf ) then
#  set rm_gmtconf = 0  # Do not remove pre-existing gmt.conf file after script execution
#else
#  set rm_gmtconf = 1  # Remove gmt.conf file generated by script after execution
#endif
#if ( -f gmt.history ) then
#  rm_gmthistory = 0  # Do not remove pre-existing gmt.history file after script execution
#else
#  set rm_gmthistory = 1  # Remove gmt.history file generated by script after execution
#endif

# Set GMT variables
gmt gmtset GMT_COMPATIBILITY 5
gmt gmtset MAP_TICK_LENGTH_PRIMARY=-5p MAP_ANNOT_OFFSET_PRIMARY 10p FONT_LABEL 14p FONT_TITLE 14p

# Set default variables
set rmean = 'N'                           # Do not remove mean before plotting
set symb = '-Sc2p -Ey1p -G0/0/191'        # Open blue circles with black error bars
set symb_excl = '-Sc2p -Ey1p/,153 -G153'  # Grey open circles and error bars
set t1 = 00000000000000                   # (YYYYMMDDhhmmss) Use all data
set t2 = 99999999999999                   # (YYYYMMDDhhmmss) Use all data
set ta = '1H'                             # Annotations every hour
set tf = '15m'                            # Frame ticks every 15 minutes
set tg = "$ta"                            # Grid lines at each annotation
set c = 1                                 # Coordinate multiplication factor
set unit = ( 'm' 0.1 )                    # Coordinate units; increment for "gmtinfo"
set ebars = ()                            # Do not include space for error bars when plotting (time series)
set cpt = ()                              # Do not plot colour-coded heights (map)
set eell = ()                             # Do not plot error ellipses for position (map)

# Parse command line arguments
while ( $#argv )
  switch ( $argv[1] )
    case -a:  # Plot atmospheric delay time series
      set a
      breaksw
    case -c:  # Colour-code heights (implies -map)
      set cpt = '-Ctemp.cpt'
      set map
      breaksw
    case -d:  # Date style (as for GMT's PLOT_DATE_FORMAT)
      gmt gmtset FORMAT_DATE_MAP `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'`
      breaksw
    case -eb:  # Leave space for error bars when plotting
      set ebars = '-Sy'
      breaksw
    case -ee:  # Plot error ellipses for map positions
      set eell
      breaksw
    case -ex:  # Plot excluded points in grey
      set excl
      breaksw
    case -f:  # Input files
      set files = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )
      breaksw
    case -km:  # Plot coordinates in km
      set c = 1e-3
      set unit = ( 'km' 0.1 )
      breaksw
    case -mm:  # Plot coordinates in mm
      set c = 1e3
      set unit = ( 'mm' 10 )
      breaksw
    case -map:  # Plot map view
      set map
      breaksw
    case -rmean:  # Remove mean?
      set rmean = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )
      breaksw
    case -s:  # Sigma limit
      set maxsig = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )
      breaksw
    case -t:  # Date style (as for GMT's FORMAT_CLOCK_MAP)
      gmt gmtset FORMAT_CLOCK_MAP `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'`
      breaksw
    case -t1:  # Specified start time
      set t1 = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )
      breaksw
    case -t2:  # Specified end time
      set t2 = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )
      breaksw
    case -ta:  # Time-axis or position annotation interval
      set ta = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}'` )           # Time axis annotation interval
      set int = ( `echo $ta | sed 's/h/ 3600/; s/m/ 60/' | awk '{print $1*$2}'` )  # Map position annotation interval
      breaksw
    case -tf:  # Time-axis frame interval
      set tf = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}' ` )
      breaksw
    case -tg:  # Time-axis grid interval
      set tg = ( `echo $argv[2-] | awk -F' -[acdefkmrst]' '{print $1}' ` )
      breaksw
    default:
      breaksw
  endsw
  shift
end

# Run program
if ( $?map ) then  # Plot map view

  foreach file ( $files )

    gmt gmtset MAP_ANNOT_ORTHO wesn

    set info = ( `basename $file | awk -F'.' '{print $(NF-2),$(NF-1)}' | tr '[:lower:]' '[:upper:]'` )  # NEU, DHU, XYZ or GEOD; site name
    set ps = "${file}_map.ps"
    set j = '-JX16c/16c'

    # Correct coordinate multiplication factor and unit if input file is "DHU", which is in mm not m
    if ( "$info[1]" == 'DHU' ) then
      set c_orig = $c            # Original (command line) coordinate multiplication factor
      set unit_orig = ( $unit )  # Original (command line) unit
      set c = `echo $c_orig | awk '{printf("%.3f",$1/1e3)}'`
      set unit = ( 'mm' 10 )
    endif

    awk '$0 ~ /^ / {print $9,$7,$11}' $files >! temp.enu
    if ( $#cpt != 0 ) then
      gmt makecpt `gmt gmtinfo temp.enu -T5/2` -Z >! temp.cpt
    endif
    set r = `gmt gmtinfo temp.enu -I10/10`
    if ( $?int ) then
      gmt psxy temp.enu $j $r -Sc5p $cpt -Bxa50f10 -Bya50f10 -BWeSn -P -K >! $ps
      # Add annotation every $int seconds
      awk -v t=$int '$0 ~ /^ / && ($4*3600+$5*60+$6) % t == 0 {printf("%s %s %02d:%02d:%02d\n",$9,$7,$4,$5,sqrt($6^2))}' $file |\
       gmt pstext $j $r -F+f8p+jML -O >> $ps
    else
      gmt psxy temp.enu $j $r -Sc5p $cpt -Bxa50f10 -Bya50f10 -BWeSn -P >! $ps
    endif
    rm -f temp.enu temp.cpt

    # Reset coordinate multiplication factor and unit to original values if input file is "DHU"
    if ( "$info[1]" == 'DHU' ) then
      set c = $c_orig
      set unit = ( $unit_orig )
    endif

    gv $ps &

  end

else  # Plot time series

  foreach file ( $files )

    set info = ( `basename $file | awk -F'.' '{print $(NF-2),$(NF-1)}' | tr '[:lower:]' '[:upper:]'` )  # NEU, DHU, XYZ or GEOD; site name
    set ps = "$file.ps"
    set j = '-JX16cT/5c'
    set y = '-Y5c'

    # NEU, XYZ, DHU or GEOD file?
    if ( "$info[1]" == 'NEU' || "$info[1]" == 'DHU' || "$info[1]" == 'XYZ' ) then

      # Correct coordinate multiplication factor and unit if input file is "DHU", which is in mm not m
      if ( "$info[1]" == 'DHU' ) then
        set c_orig = $c            # Original (command line) coordinate multiplication factor
        set unit_orig = ( $unit )  # Original (command line) unit
        set c = `echo $c_orig | awk '{printf("%.3f",$1/1e3)}'`
        set unit = ( 'mm' 10 )
      endif

      # For each component, apply coordinate multiplication factor and format to enable time tests, then output for plotting in GMT
      awk -v c=$c '$0 ~ /^ / && $14 != 0 {printf("%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$7*c,$8*c)}' $file |\
       awk -v t1=$t1 -v t2=$t2 '$1 >= t1 && $1 <= t2 {printf("%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3)}' >! temp.t1
      awk -v c=$c '$0 ~ /^ / && $14 != 0 {printf("%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$9*c,$10*c)}' $file |\
       awk -v t1=$t1 -v t2=$t2 '$1 >= t1 && $1 <= t2 {printf("%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3)}' >! temp.t2
      awk -v c=$c '$0 ~ /^ / && $14 != 0 {printf("%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$11*c,$12*c)}' $file |\
       awk -v t1=$t1 -v t2=$t2 '$1 >= t1 && $1 <= t2 {printf("%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3)}' >! temp.t3

      # Calculate mean value to subtract
      if ( $rmean =~ '*[Yy]*' ) then
        set mean = ( `join temp.t1 temp.t2 | join - temp.t3 |\
                       awk 'BEGIN {x1=0; x2=0; x3=0; i=0}; \
                            {x1=x1+$2; x2=x2+$4; x3=x3+$6; i++}; \
                            END {printf("%.1f %.1f %.1f",x1/i,x2/i,x3/i)}'` )
      else if ( $rmean =~ '*[Ww]*' ) then
        set mean = ( `join temp.t1 temp.t2 | join - temp.t3 |\
                       awk 'BEGIN {x1=0; x2=0; x3=0; w1=0; w2=0; w3=0}; \
                            {x1=x1+$2/$3^2; x2=x2+$4/$5^2; x3=x3+$6/$7^2; w1=w1+1/$3^2; w2=w2+1/$5^2; w2=w2+1/$7^2}; \
                            END {printf("%.1f %.1f %.1f",x1/w1,x2/w2,x3/w3)}'` )
      else
        set mean = ( 0 0 0 )
      endif

      # Subtract mean and apply sigma limits
      if ( $?maxsig ) then  # Impose sigma limits
        if ( $#maxsig == 1 || ($#maxsig == 2 && "$info[1]" == 'XYZ') || $#maxsig > 3 ) then  # Same of all components
          if ( $#maxsig == 2 && "$info[1]" == 'XYZ' ) then  # Provide warnings
            echo 'Two (horizontal and vertical) sigma limits given but ECEF Cartesian components being plotted.'
            echo "Setting all components' sigma limits to $maxsig[1]"
          else if ( $#maxsig > 3 ) then
            echo 'Number of components exceeds three.'
            echo "Setting all components' sigma limits to $maxsig[1]"
          endif
          set maxsig1 = $maxsig[1]  # North or X
          set maxsig2 = $maxsig[1]  # East or Y
          set maxsig3 = $maxsig[1]  # Up or Z
        else if ( $#maxsig == 2 ) then  # Horizontal and vertical components
          set maxsig1 = $maxsig[1]  # North
          set maxsig2 = $maxsig[1]  # East
          set maxsig3 = $maxsig[2]  # Up
        else if ( $#maxsig == 3 ) then  # Three components separately
          set maxsig1 = $maxsig[1]  # North or X
          set maxsig2 = $maxsig[2]  # East or Y
          set maxsig3 = $maxsig[3]  # Up or Z
        endif
        awk -v mean=$mean[1] -v maxsig=$maxsig1 '$3 <= maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t1 >! plot.t1  # North or X
        awk -v mean=$mean[2] -v maxsig=$maxsig2 '$3 <= maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t2 >! plot.t2  # East or Y
        awk -v mean=$mean[3] -v maxsig=$maxsig3 '$3 <= maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t3 >! plot.t3  # Up or Z
        awk -v mean=$mean[1] -v maxsig=$maxsig1 '$3 > maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t1 >! excl.t1   # North or X
        awk -v mean=$mean[2] -v maxsig=$maxsig2 '$3 > maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t2 >! excl.t2   # East or Y
        awk -v mean=$mean[3] -v maxsig=$maxsig3 '$3 > maxsig {printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t3 >! excl.t3   # Up or Z
      else
        awk -v mean=$mean[1] '{printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t1 >! plot.t1  # North or X
        awk -v mean=$mean[2] '{printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t2 >! plot.t2  # East or Y
        awk -v mean=$mean[3] '{printf("%s %.7f %.7f\n",$1,$2-mean,$3)}' temp.t3 >! plot.t3  # Up or Z
      endif  # Impose sigma limits END
      rm -f temp.t[123]

      # Calculate GMT plotting ranges and axis information
      # (gmtinfo currently does not work properly with full date strings,
      # so specify "--TIME_UNIT=m" for output to nearest minute)
      set r1 = `cat plot.t1 excl.t1 | gmt gmtinfo -f0T,1f -I60m/$unit[2] $ebars --TIME_UNIT=m`
      set r2 = `cat plot.t2 excl.t2 | gmt gmtinfo -f0T,1f -I60m/$unit[2] $ebars --TIME_UNIT=m`
      set r3 = `cat plot.t3 excl.t3 | gmt gmtinfo -f0T,1f -I60m/$unit[2] $ebars --TIME_UNIT=m`

      # Calculate axis information
      # (annotations every 1, 2 or 5 units;
      # greatest-number-less-than-ten annotations per axis)
      set b1 = ( `echo $r1 |\
                   awk -v ta=$ta -v tf=$tf -v tg=$tg -F'/' \
                    'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; \
                     {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}'` )
      set b2 = ( `echo $r2 |\
                   awk -v ta=$ta -v tf=$tf -v tg=$tg -F'/' \
                    'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; \
                     {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}'` )
      set b3 = ( `echo $r3 |\
                   awk -v ta=$ta -v tf=$tf -v tg=$tg -F'/' \
                    'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; \
                     {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bpxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}'` )

      # Define axes labels
      if ( "$info[1]" == 'XYZ' ) then  # XYZ
        set label = ( 'ECEF X' 'ECEF Y' 'ECEF Z' Atm. )
      else  # NEU or DHU
        set label = ( East North Up Atm. )
      endif

      # Plot time series (component 3 at bottom, 2 in middle, 1 at top)
      if ( $?a ) then  # Include atmospheric delay
        awk '$0 ~ /^ / && $14 != 0 {printf("%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$15,$16)}' $file |\
         awk -v t1=$t1 -v t2=$t2 '$1 >= t1 && $1 <= t2 {printf("%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3)}' >! plot.ta
        set ra = `gmt gmtinfo plot.ta -f0T,1f -I60m/$unit[2] $ebars --TIME_UNIT=h`
        set ba = ( `echo $ra |\
                     awk -v ta=$ta -v tf=$tf -v tg=$tg -F'/' \
                      'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; \
                     {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bpxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}'` )
        gmt psxy plot.ta $j $ra $symb ${ba[1]}+l'UTC' ${ba[2]}+l"$label[4] / mm" -Bsx1D -BwESn -P -K >! $ps
        gmt psxy plot.t3 $j $r3 $symb ${b3[1]} ${b3[2]}+l"$label[3] / $unit[1]" -BWesn $y -O -K >> $ps
      else
        gmt psxy plot.t3 $j $r3 $symb ${b3[1]}+l'UTC' ${b3[2]}+l"$label[3] / $unit[1]" -Bsx1D -BWeSn -P -K >! $ps
      endif
      if ( $?excl ) then  # Plot excluded points in grey
        gmt psxy excl.t3 $j $r3 $symb_excl -O -K >> $ps
      endif
      if ( "$info[1]" == 'XYZ' ) then
        if ( $?excl ) then  # Plot excluded points in grey
          gmt psxy excl.t2 $j $r2 $symb_excl $y -O -K >> $ps
          gmt psxy plot.t2 $j $r2 $symb ${b2[1]} ${b2[2]}+l"$label[2] / $unit[1]" -BwEsn -O -K >> $ps
          gmt psxy excl.t1 $j $r1 $symb_excl $y -O -K >> $ps
          gmt psxy plot.t1 $j $r1 $symb ${b1[1]} ${b1[2]}+l"$label[1] / $unit[1]" -BWesn+t"$info[2]" -O >> $ps
        else
          gmt psxy plot.t2 $j $r2 $symb ${b2[1]} ${b2[2]}+l"$label[2] / $unit[1]" -BwEsn $y -O -K >> $ps
          gmt psxy plot.t1 $j $r1 $symb ${b1[1]} ${b1[2]}+l"$label[1] / $unit[1]" -BWesn+t"$info[2]" $y -O >> $ps
        endif
      else  # Plot right-handed triplet by swapping components 1 (north) and 2 (east)
        if ( $?excl ) then  # Plot excluded points in grey
          gmt psxy excl.t1 $j $r1 $symb_excl $y -O -K >> $ps
          gmt psxy plot.t1 $j $r1 $symb ${b1[1]} ${b1[2]}+l"$label[2] / $unit[1]" -BwEsn -O -K >> $ps
          gmt psxy excl.t2 $j $r2 $symb_excl $y -O -K >> $ps
          gmt psxy plot.t2 $j $r2 $symb ${b2[1]} ${b2[2]}+l"$label[1] / $unit[1]" -BWesn+t"$info[2]" -O >> $ps
        else
          gmt psxy plot.t1 $j $r1 $symb ${b1[1]} ${b1[2]}+l"$label[2] / $unit[1]" -BwEsn $y -O -K >> $ps
          gmt psxy plot.t2 $j $r2 $symb ${b2[1]} ${b2[2]}+l"$label[1] / $unit[1]" -BWesn+t"$info[2]" $y -O >> $ps
        endif
      endif
      rm -f plot.t[123a] excl.t[123]

      # Reset coordinate multiplication factor and unit to original values if input file is "DHU"
      if ( "$info[1]" == 'DHU' ) then
        set c = $c_orig
        set unit = ( $unit_orig )
      endif

    #else if ( "$info[1]" =~ 'GEOD' ) then  # Not yet available

    endif

    gv $ps &

  end

endif

#if ( $rm_gmtconf == 1 ) then  # Remove gmt.conf file generated by script
#  rm -f gmt.conf
#endif
#if ( $rm_gmthistory == 1 ) then  # Remove gmt.history file generated by script
#  rm -f gmt.history
#endif

