#!/bin/bash

version='2021/07/06'
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# Edit history (only recorded from 2021/06/24 onwards):
# 
# 2021/07/06: MAF updated description of options in help page to clarify use of
#             -d, -t, -ta, -tf and -tg options.
# 2021/06/30: MAF removed incorrect reassignment of $unit in case of "DHU" file
#             and set GMT to calculate annotation, frame and grid interval
#             automatically rather than the script itself ($b1, $b2, $b3, $ba).
# 2021/06/24: MAF converted old script written in csh to bash.
#
#2345678901234567890123456789012345678901234567890123456789012345678901234567890


# Redirect standard error to /dev/null
#exec 2>/dev/null


# Null input test
if [ $# -eq 0 ]; then
  cat << END && exit 1
12345678901234567890123456789012345678901234567890123456789012345678901234567890

  Program:     $(basename "$0")
  Written by:  Michael A Floyd 
  Last edited: Michael A Floyd ($version, MIT)

  Usage: $(basename "$0") -f <track output NEU, DHU or XYZ file> <options>

  Options:
    -t1 <start> : Specify start time for plotting (should be expressed in
                  YYYYMMDDhhmmss format, e.g. 20110615171700)
    -t2 <end>   : Specify end time for plotting (should be expressed in
                  YYYYMMDDhhmmss format, e.g. 20110615171700)
    -ta #[H|M|S] : time-axis (time series) or position (map) annotation interval
                   (for GMT's "-B" option)

  Options specific to plotting time series:
    -km : plot in km (useful for car or flight data)
    -mm : plot in mm (useful for antenna collapses or GPS seismology)
    -rmean [y(es)|w(eighted)|n(o)] : Remove mean before plotting? (default = n)
    -tf #[H|M|S] : time-axis frame interval (for GMT's "-B" option)
    -tg #[H|M|S] : time-axis grid interval (for GMT's "-B" option)
    -eb : leave space for error bars when plotting
    -a : plot atmospheric delay time series
    -d [format] : specify date format (for GMT's FORMAT_DATE_MAP)
                  (default = yyyy-mm-dd)
    -t [format] : specify time format (for GMT's FORMAT_CLOCK_MAP)
                  (default = hh:mm:ss)
    -s [sigma limit] : Do not plot point with 1-sigma greater than [sigma limit]
                       (expressed in same units as plot). If one number is
                       specified, it is applied to all components; if two numbers
                       are specified, they are assumed to be (1) horizontal and
                       (2) vertical sigma limits; if three numbers are given,
                       they are assumed to be the sigma limits for the three
                       components (N,E,U or X,Y,Z)
    -ex : Plot excluded points (e.g. with "-s" option) in gray
    -l  : Plot continuous line over time series points (useful for GPS
          seismology)

  Options specific to plotting map view:
    -map : plot in map view
    -c : colour-code track heights (implies -map)

  Description: sh_plot_track takes the output from track run and plots the time
               series (default) or a map. The script will recognise the format
               of the coordinates in the file (e.g. NEU, DHU or XYZ) and plot
               the data and label the axes accordingly. If a map is plotted, the
               -ta option adds time-stamp annotations to positions at the
               specified interval (default is no annotations).

               The arguments for the -ta, -tf, -tg, -t and -d options are
               compatible with GMT. For example, to plot annotations every hour
               using the format "14:00", "15:00", etc., use "-ta 1H -t hh:mm".
               See gmtdefaults and psbasemap for more details.

12345678901234567890123456789012345678901234567890123456789012345678901234567890
END
fi


# Ensure locale will use point, not comma, for decimal separator
LC_NUMERIC='C' && export LC_NUMERIC


if [ -f gmt.conf ]; then
  rm_gmtconf=0  # Do not remove pre-existing gmt.conf file after script execution
else
  rm_gmtconf=1  # Remove gmt.conf file generated by script after execution
fi
if [ -f gmt.history ]; then
  rm_gmthistory=0  # Do not remove pre-existing gmt.history file after script execution
else
  rm_gmthistory=1  # Remove gmt.history file generated by script after execution
fi


flags='acdefklmrst'  # Command line option flags


# Initialize empty variables and arrays
ebars=()                            # Do not include space for error bars when plotting (time series)
cpt=()                              # Do not plot colour-coded heights (map)
maxsig=()                           # Do not exclude points based on sigma limits


# Program defaults
rmean=0                             # Do not remove mean before plotting
symb='-Sc2p -Ey1p -G0/0/191'        # Open blue circles with black error bars
symb_excl='-Sc2p -Ey1p/,153 -G153'  # Grey open circles and error bars
t1=00000000000000                   # (YYYYMMDDhhmmss) Use all data
t2=99999999999999                   # (YYYYMMDDhhmmss) Use all data
#ta='1H'                            # Annotations every hour
ta=()                               # Let GMT decide annotation interval
#tf='15m'                           # Frame ticks every 15 minutes [comment out to let GMT decide]
tf=()                               # Let GMT decide frame interval
#tg="$ta"                           # Grid lines at each annotation [comment out to let GMT decide]
tg=()                               # Let GMT decide grid interval
c=1                                 # Coordinate multiplication factor
unit=( 'm' 0.1 )                    # Coordinate units; increment for "gmtinfo"
l=0                                 # Do not plot continuous line over time series points
excl=0                              # Do not plot excluded data points
atm=0                               # Do not plot atmospheric delay time series
map=0                               # Do not plot map view
eell=0                              # Do not plot error ellipses for position (map)


# Plot defaults
gmt gmtset GMT_COMPATIBILITY 5
gmt gmtset MAP_TICK_LENGTH_PRIMARY=-5p MAP_ANNOT_OFFSET_PRIMARY 10p FONT_LABEL 14p FONT_TITLE 14p


# Print version
printf "$(basename "$0") version $version\n"


# Parse command line arguments
while [ $# -gt 0 ]; do

  case $1 in

    -a )  # Plot atmospheric delay time series
      atm=1
      ;;

    -c )  # Colour-code heights (implies -map)
      cpt='-Ctemp.cpt'
      map=1
      ;;

    -d )  # Date style (as for GMT's FORMAT_DATE_MAP)
      d_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-d *//') )
      if [ ${#d_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -d option. Using defaults...\n'
      else
        if [ ${#d_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#d_args[*]}) given to -d option. Using first one only...\n"
        fi
        gmt gmtset FORMAT_DATE_MAP "${d_args[0]}"
      fi
      ;;

    -eb )  # Leave space for error bars when plotting
      ebars='-Sy'
      ;;

    -ee )  # Plot error ellipses for map positions
      eell=1
      ;;

    -ex )  # Plot excluded points in grey
      excl=1
      ;;

    -f )  # Input files
      files=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-f *//') )
      if [ ${#files[@]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -f option. Exiting...\n' && exit 1
      fi
      ;;

    -km )  # Plot coordinates in km
      c='1e-3'
      unit=( 'km' 0.1 )
      ;;

    -l )  # Plot continuous line
      l=1
      ;;

    -mm )  # Plot coordinates in mm
      c='1e3'
      unit=( 'mm' 10 )
      ;;

    -map )  # Plot map view
      map=1
      ;;

    -r* )  # Remove mean?
      r_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-r[^ ]* *//') )
      if [ ${#r_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -r option. Using defaults...\n'
      else
        if [ ${#r_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#r_args[*]}) given to -r option. Using first one only...\n"
        fi
        if [ "${r_args[0]:0:1}" = 'Y' -o "${r_args[0]:0:1}" = 'y' ]; then  # Remove unweighted mean before plotting
          rmean=1
        elif [ "${r_args[0]:0:1}" = 'W' -o "${r_args[0]:0:1}" = 'w' ]; then  # Remove weighted mean before plotting
          rmean=2
        else
          printf "! Warning ! Unrecognized argument (${r_args[0]}) given to -r option. Using defaults...\n"
        fi
      fi
      ;;

    -s )  # Sigma limit
      s_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-s *//') )
      if [ ${#s_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -s option. Using defaults...\n'
      elif [ ${#s_args[*]} -eq 1 ]; then
        printf '! Warning ! One argument given to -s option. Applying to all coordinates...\n'
        maxsig=( ${s_args[0]} ${s_args[0]} ${s_args[0]} )  # n,e,u
      elif [ ${#s_args[*]} -eq 2 ]; then
        printf '! Warning ! Two arguments given to -s option.\nApplying to first to horizontal coordinates and second to vertical...\n'
        maxsig=( ${s_args[0]} ${s_args[0]} ${s_args[1]} )  # n,e,u
      elif [ ${#s_args[*]} -ge 3 ]; then
        if [ ${#s_args[*]} -gt 3 ]; then
          printf "! Warning ! Too many arguments (${#r_args[*]}) given to -r option. Using first three only...\n"
        fi
        maxsig=( ${s_args[0]} ${s_args[1]} ${s_args[2]} )  # n,e,u
      fi
      ;;

    -t )  # Date style (as for GMT's FORMAT_CLOCK_MAP)
      t_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-t *//') )
      if [ ${#t_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -t option. Using defaults...\n'
      else
        if [ ${#t_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#t_args[*]}) given to -t option. Using first one only...\n"
        fi
        gmt gmtset FORMAT_CLOCK_MAP "${t_args[0]}"
      fi
      ;;

    -t1 )  # Specified start time
      t1_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-t1 *//') )
      if [ ${#t1_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -t1 option. Using defaults...\n'
      else
        if [ ${#t1_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#t1_args[*]}) given to -t1 option. Using first one only...\n"
        fi
        t1="${t1_args[0]}"
      fi
      ;;

    -t2 )  # Specified end time
      t2_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-t2 *//') )
      if [ ${#t2_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -t2 option. Using defaults...\n'
      else
        if [ ${#t2_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#t2_args[*]}) given to -t2 option. Using first one only...\n"
        fi
        t2="${t2_args[0]}"
      fi
      ;;

    -ta )  # Time-axis or position annotation interval
      ta_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-ta *//') )
      if [ ${#ta_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -ta option. Using defaults...\n'
      else
        if [ ${#ta_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#ta_args[*]}) given to -ta option. Using first one only...\n"
        fi
        ta="${ta_args[0]}"
      fi
      int=( $(sed 's/h/ 3600/; s/m/ 60/' <<< "$ta" | awk '{print $1*$2}') )  # Map position annotation interval
      ;;

    -tf )  # Time-axis frame interval
      tf_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-tf *//') )
      if [ ${#tf_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -tf option. Using defaults...\n'
      else
        if [ ${#tf_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#tf_args[*]}) given to -tf option. Using first one only...\n"
        fi
        tf="${tf_args[0]}"
      fi
      ;;

    -tg )  # Time-axis grid interval
      tg_args=( $(awk -v FS=" -[$flags]" '{print $1}' <<< "$*" | sed 's/^-tg *//') )
      if [ ${#tg_args[*]} -eq 0 ]; then
        printf '! Warning ! No arguments given to -tg option. Using defaults...\n'
      else
        if [ ${#tg_args[*]} -gt 1 ]; then
          printf "! Warning ! Too many arguments (${#tg_args[*]}) given to -tg option. Using first one only...\n"
        fi
        tg="${tg_args[0]}"
      fi
      ;;

  esac

  shift

done

# Run program
if [ $map -eq 1 ]; then  # Plot map view

  for file in ${files[@]}; do

    gmt gmtset MAP_ANNOT_ORTHO wesn

    info=( $(basename "$file" | awk -v FS='.' '{print $(NF-2),$(NF-1)}' | tr '[:lower:]' '[:upper:]') )  # NEU, DHU, XYZ or GEOD; site name
    ps="${file}_map.ps"
    j='-JX16c/16c'

    # Correct coordinate multiplication factor and unit if input file is "DHU", which is in mm not m
    if [ "${info[0]}" = 'DHU' ]; then
      c_orig="$c"               # Original (command line) coordinate multiplication factor
      #unit_orig=( ${unit[*]} )  # Original (command line) unit
      c="$(awk '{printf "%.3f",$1/1e3}' <<< "$c_orig")"
      #unit=( 'mm' 10 )
    fi

    awk '{if ($0 ~ /^ /) print $9,$7,$11}' ${files[@]} >| temp.enu
    if [ ${#cpt[*]} -ne 0 ]; then
      gmt makecpt $(gmt gmtinfo temp.enu -T5/2) -Z >| temp.cpt
    fi
    r="$(gmt gmtinfo temp.enu -I10/10)"
    if [ $int -eq 1 ]; then
      gmt psxy temp.enu $j $r -Sc5p $cpt -Bxa50f10 -Bya50f10 -BWeSn -P -K >| $ps
      # Add annotation every $int seconds
      awk -v t=$int '{if ($0 ~ /^ / && ($4*3600+$5*60+$6) % t == 0) printf "%s %s %02d:%02d:%02d\n",$9,$7,$4,$5,sqrt($6^2)}' $file |
       gmt pstext $j $r -F+f8p+jML -O >> $ps
    else
      gmt psxy temp.enu $j $r -Sc5p $cpt -Bxa50f10 -Bya50f10 -BWeSn -P >| $ps
    fi
    rm -f temp.enu temp.cpt

    # Reset coordinate multiplication factor and unit to original values if input file is "DHU"
    if [ "${info[0]}" = 'DHU' ]; then
      c="$c_orig"
      #unit=( ${unit_orig[*]} )
    fi

    #gv $ps &

  done

else  # Plot time series

  for file in ${files[@]}; do  # Loop over input file(s)

    info=( $(basename "$file" | awk -v FS='.' '{print $(NF-2),$(NF-1)}' | tr '[:lower:]' '[:upper:]') )  # NEU, DHU, XYZ or GEOD; site name
    ps="$file.ps"
    j='-JX16cT/5c'
    y='-Y5c'

    # NEU, XYZ, DHU or GEOD file?
    if [ "${info[0]}" = 'NEU' -o "${info[0]}" = 'DHU' -o "${info[0]}" = 'XYZ' ]; then

      # Correct coordinate multiplication factor and unit if input file is "DHU", which is in mm not m
      if [ "${info[0]}" = 'DHU' ]; then
        c_orig="$c"               # Original (command line) coordinate multiplication factor
        #unit_orig=( ${unit[*]} )  # Original (command line) unit
        c="$(awk '{printf "%.3f",$1/1e3}' <<< "$c_orig")"
        #unit=( 'mm' 10 )
      fi

      # For each component, apply coordinate multiplication factor and format to enable time tests, then output for plotting in GMT
      awk -v c=$c '{if ($0 ~ /^ / && $14 != 0) printf "%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$7*c,$8*c}' $file |
       awk -v t1=$t1 -v t2=$t2 '{if ($1 >= t1 && $1 <= t2) printf "%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3}' >| temp.t1
      awk -v c=$c '{if ($0 ~ /^ / && $14 != 0) printf "%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$9*c,$10*c}' $file |
       awk -v t1=$t1 -v t2=$t2 '{if ($1 >= t1 && $1 <= t2) printf "%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3}' >| temp.t2
      awk -v c=$c '{if ($0 ~ /^ / && $14 != 0) printf "%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$11*c,$12*c}' $file |
       awk -v t1=$t1 -v t2=$t2 '{if ($1 >= t1 && $1 <= t2) printf "%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3}' >| temp.t3

      # Calculate mean value to subtract
      if [ $rmean -eq 1 ]; then  # Unweighted mean
        mean=( $(join temp.t1 temp.t2 | join - temp.t3 | awk 'BEGIN {x1=0; x2=0; x3=0; i=0}; {x1=x1+$2; x2=x2+$4; x3=x3+$6; i++}; END {printf "%.1f %.1f %.1f",x1/i,x2/i,x3/i}') )
      elif [ $rmean -eq 2 ]; then  # Weighted mean
        mean=( $(join temp.t1 temp.t2 | join - temp.t3 | awk 'BEGIN {x1=0; x2=0; x3=0; w1=0; w2=0; w3=0}; {x1=x1+$2/$3^2; x2=x2+$4/$5^2; x3=x3+$6/$7^2; w1=w1+1/$3^2; w2=w2+1/$5^2; w3=w3+1/$7^2}; END {printf "%.1f %.1f %.1f",x1/w1,x2/w2,x3/w3}') )
      else
        mean=( 0 0 0 )
      fi

      # Subtract mean and apply sigma limits
      if [ ${#maxsig[*]} -gt 0 ]; then  # Impose sigma limits
${s_args[0]} ${s_args[0]} ${s_args[1]}
        if [ "${info[0]}" = 'XYZ' ]; then  # Same of all components
          if [ ${maxsig[0]} -ne ${maxsig[2]} -o ${maxsig[1]} -ne ${maxsig[2]} ]; then  # Provide warnings
            #printf 'Two (horizontal and vertical) sigma limits given but ECEF Cartesian components being plotted.\n'
            printf "Setting all components' sigma limits to ${maxsig[0]} for \"XYZ\" file\n"
            maxsig1="${maxsig[0]}"  # X
            maxsig2="${maxsig[0]}"  # Y
            maxsig3="${maxsig[0]}"  # Z
          #elif [ ${#maxsig[*]} -gt 3 ]; then
          #  printf 'Number of components exceeds three.\n'
          #  printf "Setting all components' sigma limits to ${maxsig[0]}\n"
          fi
        else
          maxsig1="${maxsig[0]}"  # North
          maxsig2="${maxsig[1]}"  # East
          maxsig3="${maxsig[2]}"  # Up
        fi
        awk -v mean=${mean[0]} -v maxsig=$maxsig1 '{if ($3 <= maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t1 >| plot.t1  # North or X
        awk -v mean=${mean[1]} -v maxsig=$maxsig2 '{if ($3 <= maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t2 >| plot.t2  # East or Y
        awk -v mean=${mean[2]} -v maxsig=$maxsig3 '{if ($3 <= maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t3 >| plot.t3  # Up or Z
        awk -v mean=${mean[0]} -v maxsig=$maxsig1 '{if ($3 > maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t1 >| excl.t1   # North or X
        awk -v mean=${mean[1]} -v maxsig=$maxsig2 '{if ($3 > maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t2 >| excl.t2   # East or Y
        awk -v mean=${mean[2]} -v maxsig=$maxsig3 '{if ($3 > maxsig) printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t3 >| excl.t3   # Up or Z
      else
        awk -v mean=${mean[0]} '{printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t1 >| plot.t1  # North or X
        awk -v mean=${mean[1]} '{printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t2 >| plot.t2  # East or Y
        awk -v mean=${mean[2]} '{printf "%s %.7f %.7f\n",$1,$2-mean,$3}' temp.t3 >| plot.t3  # Up or Z
      fi  # END: Impose sigma limits
      rm -f temp.t[123]

      # Calculate GMT plotting ranges and axis information
      # (gmtinfo currently does not work properly with full date strings,
      # so specify "--TIME_UNIT=m" for output to nearest minute)
      r1="$(cat plot.t1 excl.t1 | gmt gmtinfo -f0T,1f -I1/${unit[1]} $ebars --TIME_UNIT=m)"
      r2="$(cat plot.t2 excl.t2 | gmt gmtinfo -f0T,1f -I1/${unit[1]} $ebars --TIME_UNIT=m)"
      r3="$(cat plot.t3 excl.t3 | gmt gmtinfo -f0T,1f -I1/${unit[1]} $ebars --TIME_UNIT=m)"

      # Calculate axis information
      # (annotations every 1, 2 or 5 units;
      # greatest-number-less-than-ten annotations per axis)
      #b1=( $(awk -v ta=$ta -v tf=$tf -v tg=$tg -v FS='/' 'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}' <<< "$r1") )
      #b2=( $(awk -v ta=$ta -v tf=$tf -v tg=$tg -v FS='/' 'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}' <<< "$r2") )
      #b3=( $(awk -v ta=$ta -v tf=$tf -v tg=$tg -v FS='/' 'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bpxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}' <<< "$r3") )

      # Define axes labels
      if [ "${info[0]}" = 'XYZ' ]; then  # XYZ
        label=( 'ECEF X' 'ECEF Y' 'ECEF Z' Atm. )
      else  # NEU or DHU
        label=( East North Up Atm. )
      fi

      # Plot time series (component 3 at bottom, 2 in middle, 1 at top)
      if [ $atm -eq 1 ]; then  # Include atmospheric delay
        awk '{if ($0 ~ /^ / && $14 != 0) printf "%04d%02d%02d%02d%02d%06.3f %.7f %.7f\n",$1,$2,$3,$4,$5,sqrt($6^2),$15,$16}' $file |
         awk -v t1=$t1 -v t2=$t2 '{if ($1 >= t1 && $1 <= t2) printf "%04d-%02d-%02dT%02d:%02d:%06.3f %s %s\n",substr($1,1,4),substr($1,5,2),substr($1,7,2),substr($1,9,2),substr($1,11,2),substr($1,13,2),$2,$3}' >| plot.ta
        ra="$(gmt gmtinfo plot.ta -f0T,1f -I1/${unit[1]} $ebars --TIME_UNIT=m)"
        #ba=( $(awk -v ta=$ta -v tf=$tf -v tg=$tg -v FS='/' 'BEGIN {n=split("0.1 0.2 0.5 1 2 5 10 20 50 1e2 2e2 5e2 1e3 2e3 5e3",a," ")}; {for (i=1; i<=n; i++) if (int(($4-$3)/a[i]) < 10) print "-Bpxa"ta"f"tf"g"tg,"-Bya"a[i]"f"a[i]/2"g"a[i]}' <<< "$ra") )
        #gmt psxy plot.ta $j $ra $symb ${ba[0]}+l'GPS Time' ${ba[1]}+l"${label[3]} (mm)" -Bsx1D -BwESn -P -K >| $ps
        gmt psxy plot.ta $j $ra $symb -Bpxa${ta}f${tf}f${tg}+l'GPS Time' -Byafg+l"${label[3]} (mm)" -Bsx1D -BwESn -P -K >| $ps
        #gmt psxy plot.t3 $j $r3 $symb ${b3[0]} ${b3[1]}+l"${label[2]} (${unit[0]})" -BWesn $y -O -K >> $ps
        gmt psxy plot.t3 $j $r3 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[2]} (${unit[0]})" -BWesn $y -O -K >> $ps
        if [ $l -eq 1 ]; then
          gmt psxy plot.t3 $j $r3 -W0.5p,255/0/0 -O -K >> $ps
        fi
      else
        #gmt psxy plot.t3 $j $r3 $symb ${b3[0]}+l'GPS Time' ${b3[1]}+l"${label[2]} (${unit[0]})" -Bsx1D -BWeSn -P -K >| $ps
        gmt psxy plot.t3 $j $r3 $symb -Bpxa${ta}f${tf}f${tg}+l'GPS Time' -Byafg+l"${label[2]} (${unit[0]})" -Bsx1D -BWeSn -P -K >| $ps
        if [ $l -eq 1 ]; then
          gmt psxy plot.t3 $j $r3 -W0.5p,255/0/0 -O -K >> $ps
        fi
      fi
      if [ $excl -eq 1 ]; then  # Plot excluded points in grey
        gmt psxy excl.t3 $j $r3 $symb_excl -O -K >> $ps
      fi
      if [ "${info[0]}" = 'XYZ' ]; then
        if [ $excl -eq 1 ]; then  # Plot excluded points in grey
          gmt psxy excl.t2 $j $r2 $symb_excl $y -O -K >> $ps
          #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[1]} (${unit[0]})" -BwEsn -O -K >> $ps
          gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[1]} (${unit[0]})" -BwEsn -O -K >> $ps
          if [ $l -eq 1 ]; then
            gmt psxy plot.t2 $j $r2 -W0.5p,255/0/0 -O -K >> $ps
          fi
          gmt psxy excl.t1 $j $r1 $symb_excl $y -O -K >> $ps
          if [ $l -eq 1 ]; then
            #gmt psxy plot.t1 $j $r1 $symb ${b1[0]} ${b1[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O -K >> $ps
            gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O -K >> $ps
            gmt psxy plot.t1 $j $r1 -W0.5p,255/0/0 -O >> $ps
          else
            #gmt psxy plot.t1 $j $r1 $symb ${b1[0]} ${b1[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O >> $ps
            gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O >> $ps
          fi
        else
          #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[1]} (${unit[0]})" -BwEsn $y -O -K >> $ps
          gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[1]} (${unit[0]})" -BwEsn $y -O -K >> $ps
          if [ $l -eq 1 ]; then
            gmt psxy plot.t2 $j $r2 -W0.5p,255/0/0 -O -K >> $ps
          fi
          if [ $l -eq 1 ]; then
            #gmt psxy plot.t1 $j $r1 $symb ${b1[0]} ${b1[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O -K >> $ps
            gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O -K >> $ps
            gmt psxy plot.t1 $j $r1 -W0.5p,255/0/0 -O >> $ps
          else
            #gmt psxy plot.t1 $j $r1 $symb ${b1[0]} ${b1[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O >> $ps
            gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O >> $ps
          fi
        fi
      else  # Plot right-handed triplet by swapping components 1 (north) and 2 (east)
        if [ $excl -eq 1 ]; then  # Plot excluded points in grey
          gmt psxy excl.t1 $j $r1 $symb_excl $y -O -K >> $ps
          #gmt psxy plot.t1 $j $r1 $symb ${b1[0]} ${b1[1]}+l"${label[1]} (${unit[0]})" -BwEsn -O -K >> $ps
          gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[1]} (${unit[0]})" -BwEsn -O -K >> $ps
          if [ $l -eq 1 ]; then
            gmt psxy plot.t1 $j $r1 -W0.5p,255/0/0 -O -K >> $ps
          fi
          gmt psxy excl.t2 $j $r2 $symb_excl $y -O -K >> $ps
          if [ $l -eq 1 ]; then
            #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O -K >> $ps
            gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O -K >> $ps
            gmt psxy plot.t2 $j $r2 -W0.5p,255/0/0 -O >> $ps
          else
            #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O >> $ps
            gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" -O >> $ps
          fi
        else
          gmt psxy plot.t1 $j $r1 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[1]} (${unit[0]})" -BwEsn $y -O -K >> $ps
          if [ $l -eq 1 ]; then
            gmt psxy plot.t1 $j $r1 -W0.5p,255/0/0 -O -K >> $ps
          fi
          if [ $l -eq 1 ]; then
            #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O -K >> $ps
            gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O -K >> $ps
            gmt psxy plot.t2 $j $r2 -W0.5p,255/0/0 -O >> $ps
          else
            #gmt psxy plot.t2 $j $r2 $symb ${b2[0]} ${b2[1]}+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O >> $ps
            gmt psxy plot.t2 $j $r2 $symb -Bpxa${ta}f${tf}f${tg} -Byafg+l"${label[0]} (${unit[0]})" -BWesn+t"${info[1]}" $y -O >> $ps
          fi
        fi
      fi
      rm -f plot.t[123a] excl.t[123]

      # Reset coordinate multiplication factor and unit to original values if input file is "DHU"
      if [ "${info[0]}" = 'DHU' ]; then
        c="$c_orig"
        #unit=( ${unit_orig[*]} )
      fi

    #elif ( "${info[0]}" = 'GEOD' ) then  # Not yet available

    fi

    #gv $ps &

  done

fi


if [ $rm_gmtconf -eq 1 ]; then  # Remove gmt.conf file generated by script
  rm -f gmt.conf
fi
if [ $rm_gmthistory -eq 1 ]; then  # Remove gmt.history file generated by script
  rm -f gmt.history
fi

