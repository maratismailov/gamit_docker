#!/bin/csh -f   
#
# Shell script for creating GMT plots of station or baseline time series from the 
# values extracted from a GLRED prt file or GLOBK bak file by sh_globk_scatter 
# and multibase. 
#
# This shell script was written originally at MIT in 1993 by Kurt Feigl and 
# M Burc Oral using output from Tom Herring's programs ensum and bcsum. 
# Last modified by S. McClusky 971124; help modified R King 980617
#
if ( $#argv == 0  || `echo $1 | cut -c2-` == "help"   ) then
echo " "    
echo " Shell script for creating GMT plots of station or baseline time series "
echo " from the values extracted from a GLRED prt file or GLOBK bak file by "
echo " sh_globk_scatter and multibase. "
echo " "
echo " Basic usage : "     
echo " "
echo "    sh_baseline -f mb*  "
echo " "    
echo "        -f     :  Files from multibase to be plotted; all begin with mb_ "  
echo " "
echo "    or  -F <filename>  where <filename> is a file containing a list of specific mb_ "
echo "                       files (baselines/stations)"
echo "  "     
echo " Type 'sh_baseline -help' to get a full list of options "  
echo " "
echo " Type 'sh_globk_scatter' or see the GLOBK manual for examples of a full sequence "
echo " of runs to go from GLOBK files to station or baseline repeatabilities."
echo " "      
if ( $argv == "-help" )  then 
echo "--------------------------------------------------------------------------------"
echo " "
echo " Extended sh_baseline features for producing publishable plots"
echo " "  
echo " -erase                : remove all psbase files in the directory [default is to overwrite" 
echo "                         only those with names that match the new ones:"
echo " "
echo " -res                  : plot residuals after removing a linear rate" 
echo "  " 
echo "  -u                   :  Scale factor for uncertainties; default = 1."
echo " "
echo " -com          file    : Creates length file from  bcsum output com-file (component) and gets baseline lengths." 
echo "                         If not issued, the value from values-file is passed to the plot." 
echo "  " 
echo " -sol          file    : Creates length file. from prt/glorg file. Try to avoid -sol (takes long time) and use -com. "
echo "                         If not issued, the value from values-file is passed to the plot." 
echo "  " 
echo " -estimate     file    : Forward Solution prt/glorg file to obtain the estimated velocities." 
echo "  		       This provides a comparison between stochastic and deterministic solution." 
echo "   		       Activated when  -com is issued. "
echo "   		       If -unc_scale issued, uncertainties of estimates will be scaled by this factor" 
echo "   		     " 
echo " -u[nc_scale]    #     : scale all uncertainties with this number. Default is 1." 
echo "  " 
echo " -o[order]       #     : polynomial to be fit to the estimates. 0 for mean  1 for velocity. -1  no trend" 
echo "  " 
echo " -vert                 : No velocity estimation for vertical component. Sets -o to 0." 
echo "  " 
echo " -y[scale]   min max   : vertical   scale.  If not issued it will be calculated."
echo "  " 
echo " -x[scale]   min max   : horizontal scale.  If not issued it will be calculated."
echo "  " 
echo " -xt[ype]              : turn on year( year.decimalday)"
echo "                         Default is day. " 
echo "  " 
echo " -n[row]               : turns on 3 rows/column option. Default is 4 rows/column. " 
echo "                         It is designed to plot only 3 components of a baseline." 
echo "                   2   : turns on 2 rows/column option." 
echo "  " 
echo " -cols        val      : Choose 1 or 2 colums of plots per page [default = 2] "
echo "  "
echo " -frame      value     : gmt border frame  ticks. Default is  2. " 
echo "  " 
echo " -anot       value     : gmt border label intervals. Default is  1. " 
echo "  " 
echo " -header               : Turn OFF page anw owner line. Good for thesis." 
echo "  " 
echo " -ps       extension   : Extend on  psbase. gmt file name (.  is not necessary)" 
echo "  " 
echo " -c[omment]   text     : Comment entry. Anything other than - as first character of a word. "
echo "                         Use _  instead. ( \> for > )" 
echo "  " 
echo " -p[rinter]  printer   : If system PRINTER  is defined something else." 
echo "  " 
echo " -res                  : plot residuals to fit..." 
echo "  " 
echo " -erase                : remove old psbase files [default is to overwrite" 
echo "  " 
endif
exit
endif

##################### SET UP DEFAULTS ############################################################
set printer   = ""
set unc_scale = none 
set header   = yes
set xtype    = day
set inst     = ""
set com      = none
set sol      = none
set yscale   = none
set files    = ""
set FILE     = ""
set comment  = " " 
set psfile   = "psbase"
set xmin     =  0
set xmax     =  0
set ymin     =  0
set ymax     =  0
set order    =  0
set vert     =  unknown
set fakeflag =  yes 
set nrow     =  4
set frame    =  1 
set anot     =  1 
set ADD      = ""
set estimate = ""
set cols = 2
set res  = "no"
set vels = none
set erase  = no
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#

echo " "
echo " Running sh_baseline to create GMT plots of time series"
echo " "

# decipher command line
while ($#argv > 0 )
set input = ( $argv )
switch($input[1])
	case -xt:
	case -xtype:
		set xtype = "year"
                breaksw
	case -x:
	case -xscale:
		set xmin = $input[2] 
		set xmax = $input[3] 
		shift input
                breaksw
	case -y:
	case -yscale:
		set ymin =  $input[2]
		set ymax =  $input[3]
		shift input
                breaksw
        case -com:
                if ( -e $input[2] ) set com       =  $input[2]
                breaksw
        case -sol:
                if ( -e $input[2] ) set sol       =  $input[2]
                breaksw
        case -u:
        case -unc:
        case -unc_scale:
                set unc_scale     =  $input[2]
	echo ">>>>>> scaling uncertainties by : "  $unc_scale 
                breaksw
        case -ps:
                set psfile       =  psbase_$input[2]
                breaksw
        case -a:
        case -add:
                set ADD       =  "_"$input[2]
                breaksw
        case -r:
        case -res:
                set res       =  "yes"
                breaksw
        case -e:
        case -erase:
                set erase       =  "yes"
                breaksw
        case -p:
        case -printer:
                set printer     =  $input[2]
                breaksw
        case -header:
                set header     =  no
                breaksw
        case -o:
        case -order:
                set order     =  $input[2]
		if ( $order < 0 ) set fakeflag = no 
                breaksw
        case -vert:
                set vert     =  no
                breaksw
        case -estimate:
                set estimate     =  $input[2]
                breaksw
        case -n:
        case -nrow:
                set nrow     =  3
                if  (`echo  $input[2]  | cut -c1 ` != "-" )   set nrow     =  $input[2]
                breaksw
        case -cols:
                set cols     =   $input[2]  
                breaksw
        case -c:
        case -comment:
		set comment   =   ( $comment $input[2] ) 
		shift input; shift input 
		while ( $#input > 0 &&   `echo  $input[1]  | cut -c1 ` != "-" ) 
			set inarg =  $input[1]
			if ( `echo  $inarg | cut -c1 ` != "-" ) then
				set comment    =   ( $comment $inarg ) 
				shift input
			endif
		end
#               set comment     =  ( $input[2] ) 
		breaksw
        case -anot:
                set anot     =   $input[2]  
		breaksw
        case -frame:
                set frame     =   $input[2]  
		breaksw
	case -f:
        case -file:
                set files        =  (  $input[2-] )
		\rm -rf tmp.files[1-7]
		echo $files >! tmp.files1
# Paul Tregoning & Simon McClusky turned off argv being set to null to allow -f
# command to appear anywhere in command line, 25th April 1995.
#		set argv = null
		breaksw
	case -F:
        case -FILE:
                set FILE       =    $input[2] 
#	        cat  $FILE | awk '{printf"%-50s ", $1 }' >! tmp.files
		\rm -rf tmp.files[1-7]
	        cat  $FILE | awk 'NR >    0 && NR <=  600  {printf"%-50s ", $1 }' >! tmp.files1
	        cat  $FILE | awk 'NR >  600 && NR <= 1200  {printf"%-50s ", $1 }' >! tmp.files2
	        cat  $FILE | awk 'NR > 1200 && NR <= 1800  {printf"%-50s ", $1 }' >! tmp.files3
	        cat  $FILE | awk 'NR > 1800 && NR <= 2400  {printf"%-50s ", $1 }' >! tmp.files4
	        cat  $FILE | awk 'NR > 2400 && NR <= 3000  {printf"%-50s ", $1 }' >! tmp.files5
	        cat  $FILE | awk 'NR > 3000 && NR <= 3600  {printf"%-50s ", $1 }' >! tmp.files6
	        cat  $FILE | awk 'NR > 3600 && NR <= 4200  {printf"%-50s ", $1 }' >! tmp.files7
		breaksw
endsw
shift argv
end
#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#=#
echo COMMENT : $comment

#=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

set psfile = $psfile$ADD

# clean up!
if ( $erase == "yes" ) then
  \rm -rf  $psfile$ADD.*
endif 

echo "creating "$psfile".*"
echo " "

# scaling/title  information   REconfigure defaults 

gmt gmtdefaults -Du                  >! gmt.conf
gmt gmtset GMT_COMPATIBILITY 5
gmt gmtset FONT_LABEL 10p \
           FONT_ANNOT_PRIMARY 10p \
           MAP_ANNOT_OFFSET_PRIMARY 0.125i \
           MAP_TICK_LENGTH_PRIMARY=-0.075i \
           PROJ_LENGTH_UNIT i

#save the order put in
set save_order = $order

set NPERPAGE = 8
if ( $cols == 1 ) set NPERPAGE = 4
set N = 0
set PAGE = 1
set FRAME = 0

set yskip = '7.5i'
if (   $nrow == 3  ) then 
  set NPERPAGE = 6
  set yskip = '6.9i'
  if ( $cols == 1 ) set NPERPAGE = 3
endif

if (   $nrow == 2  ) then 
  set NPERPAGE = 4
  set yskip = '5.2i'
  if ( $cols == 1 ) set NPERPAGE = 2
endif

#echo $files 
if ($FILE == "" ) then 
  echo $#files  $NPERPAGE | awk '{ printf "=+=+=+=+=   %4d frames   %4.0f pages =+=+=+=+=\n",$1,$1/$2}'
  echo " "
endif 

if ( -e tmp.length ) \rm -rf tmp.length
if ( $com != none && -e  $com ) then
  cat $com  | grep " 1 L " | awk '{print $1,$5}' | sort -un +1 >! tmp.length
endif

if ( $sol != none && -e  $sol ) then
  cat $sol  | grep " to " | awk '$2 == "to" && NF == 6 {print $1"-"$3,$4/1000}' >! tmp.length
endif

echo " baseline statistics " >! base_stats_$psfile

# make a dummy file
echo "0. 0." >! tmp.0

foreach file_num ( 1 2 3 4 5 6 7  ) 

  set listfile = tmp.files$file_num
  if ( ! -e   $listfile ) goto finishup

  set setoffiles =  (   `cat   $listfile`  ) 
					 # necessary for accounting 

foreach file (   `cat   $listfile`  ) 

  set frame    =  1 
  set anot     =  1 

  shift setoffiles
		 # necessary for accounting 

#echo "+=+=+=+=+=+=+=+=    "$file

  @ FRAME = $FRAME + 1 
  @ N = $N + 1

#  set OUT = $psfile.$PAGE

#  get x,y,s from non-header, non-starred data.
#### old multiplot format: year month day hour min 
#   awk '{if ($1 > 80. && $1 < 99 ) print $0}' $file | decyr $xtype >! tmp.dat
### new multibase format  decimal day/year 
  awk ' NR > 3  {print $0}' $file  >! tmp.dat
   
#  get x,y, converting from meters to mm
  awk '{print $1,$2*1000.}' tmp.dat >! tmp.xy

#  get s converting from meters to mm
#SCALE the uncertainties
  if ( $unc_scale != none  ) then
    sed s/'$'/"    "$unc_scale/g tmp.dat  >! tmp.dat.scale
    awk '{print $3*1000.*$4}' tmp.dat.scale  >! tmp.sig
  else
#NO scaling 
    awk '{print $3*1000.}' tmp.dat   >! tmp.sig
  endif

#  remove 1st order poly from x,y
  gmt trend1d tmp.xy -Np1 -Fxr  >! tmp.xr
#  insert sigmas in third column, checking for empty lines
#  pr -m -t -s' ' tmp.xr tmp.sig | awk '{ if (NF == 3) print $0}' >! tmp.xrs
  paste tmp.xr tmp.sig | awk '{ if (NF == 3) print $0}' >! tmp.xrs

#  now find best fitting Nth order polynomial  0 DC   1 vel, -1 no polynomial
#  get header for the baseline
#  if ( -e tmp.length && -e $com   ) then 
  if ( -e tmp.length  ) then 
    set basepar   = ( `cat $file | awk '{if (NR == 2) print $1,$3,$5}' | sed s/"_GPS"/""/g` )
    set length    = `grep $basepar[1] tmp.length | grep  $basepar[2] | awk '{print $2}'`
    if (  $basepar[3] == N ) set  component = +NORTH
    if (  $basepar[3] == E ) set  component = +EAST
    if (  $basepar[3] == U ) set  component = +UP
    if (  $basepar[3] == L ) set  component = LENGTH
    echo $basepar[1] $basepar[2] $component $length | awk '{printf"0.0 1.2 11p %6s to %6s   %9s  %9.3f km\n",$1,$2,$3,$4}' >! tmp.txt 
	 set vels = ""
	 if ( $estimate != "" ) then 
#  Baseline                  Length                  North                 East             Rne     Height
#                       Est.   Adj.  +-        Est.   Adj.  +-          Est.   Adj.  +-             Est.   Adj.  +-
#ANKA_GPS-MELE_GPS    -5.32   -5.32  14.46    -6.55   -6.55   1.20     1.04    1.04   1.62 0.118    51.30   51.30 605.79
#         1              2      3     4          5       6     7        8        9     10    11      12      13     14                   
	   set vel_estimated = ( `grep $basepar[1]  $estimate | grep $basepar[2] | awk ' NF == 14 {print$5,$7,$8,$10,$12,$14,$2,$4}'` )
#        echo .... $basepar[1]  $basepar[2] $vel_estimated
	   if ( $#vel_estimated == 8 ) then
	     if (  $basepar[3] == N ) set vels = ( `echo $vel_estimated | awk '{print $1,$2}' `)
	     if (  $basepar[3] == E ) set vels = ( `echo $vel_estimated | awk '{print $3,$4}' `)
	     if (  $basepar[3] == U ) set vels = ( `echo $vel_estimated | awk '{print $5,$6}' `)
	     if (  $basepar[3] == L ) set vels = ( `echo $vel_estimated | awk '{print $7,$8}' `)
	   endif
    endif

    if ( $basepar[3] == U && $vert == no ) then 
      set order = 0 
    else
      set order = $save_order
    endif
  else
    awk '{if (NR == 2) print "0.0 1.2 11p",$0}' $file | sed s/"_GPS"/""/g |  sed s/"Solution N"/"  +NORTH  "/ | sed s/"Solution E"/"  +EAST   "/ | sed s/"Solution U"/"   +UP    "/ | sed s/"Solution L"/"  LENGTH  "/ \
    | sed s/"to N Solution  1 +"/" North Offset"/ | sed s/"to E Solution  1 +"/" East Offset"/ | sed s/"to U Solution  1 +"/" Up Offset"/  >! tmp.txt
  endif
  
  if ( $FRAME == 1 ) then
    set baseline = `awk ' $5 == "to" {print $4$6} $5 != "to" {print $4}' tmp.txt` 
    set OUT = $psfile.$baseline 
    echo "Plotting: "$baseline
    if ( -e $psfile.$baseline ) \rm -rf $psfile.$baseline
  endif
  if ( $FRAME ==  $nrow  + 1  ) then
    set baseline = `awk ' $5 == "to" {print $4$6} $5 != "to" {print $4}' tmp.txt` 
    \mv $OUT $OUT"_"$baseline  
    set OUT = $OUT"_"$baseline  
    echo "Plotting: "$baseline
  endif
   
  \rm -rf tmp.xm tmp.rate tmprate.txt  tmpxm

if ( ($FRAME % 3 == 0) && ($vert == no) ) then 
  set order = 0 
else
  set order = $save_order
endif

poly01r yes $order $fakeflag $res  <   tmp.xrs >!  tmp.rate 
#if ( $order >= 0    )     more +2   tmp.rate >! tmp.xm
# tmp.xm is the line(0th or 1st order polynomial
  if ( $order >= 0    )   then
    if ( $res == "yes" ) then
      cat   tmp.rate | awk 'NR > 1 {print $1, $2 }'  >! tmp.xm 
      cat   tmp.rate | awk 'NR > 1 {print $1, $3 }'  >! tmp.xxm
    else
      cat   tmp.rate | awk 'NR > 1 {print $0 }'  >! tmp.xm
    endif
  endif

#poly01r heaader line 
#  wMEAN:     -21.611    41.459 constant:    4804.998   266.836    slope:        -52.3140463685        2.8920943838     obs:      5   nrms:         5.00   wrms:  23.5  
#    1          2         3         4          5          6           7                8                   9             10       11    12           13     14     15

  if ( $order == 0  )   then 
    head -n 1   tmp.rate |   awk '{printf"0.0 1.12 10p wmean(mm)= %7.1f @\!+_ %5.1f  nrms= %5.2f  wrms= %5.1f\n",$2,$3,$13,$15}' >! tmprate.txt
    if(  $#vels == 2 && $estimate != "" && $unc_scale == none )  echo $vels           |   awk '{printf" .2 0.97 Velocity(mm/yr)= %7.1f @\+_ %6.1f\n",$1,$2   }' >! tmprate.txt.est
    if(  $#vels == 2 && $estimate != "" && $unc_scale != none )  echo $vels $unc_scale|   awk '{printf" .2 0.97 Velocity(mm/yr)= %7.1f @\+_ %6.1f\n",$1,$2*$3}' >! tmprate.txt.est
  else if ( $order == 1  )   then 
    if ( $xtype == year  ) then
      head -n 1   tmp.rate              |   awk '{printf"0.0 1.12 10p rate(mm/yr)= %7.1f @\!+_ %5.1f  nrms= %5.2f  wrms= %5.1f\n",$8,$9,$13,$15}' >! tmprate.txt
      if(  $#vels == 2  && $unc_scale == none )  echo $vels            |   awk '{printf" .2 0.97 Velocity(mm/yr)= %7.1f @\+_ %6.1f\n",$1,$2   }' >! tmprate.txt.est
      if(  $#vels == 2  && $unc_scale != none )  echo $vels $unc_scale |   awk '{printf" .2 0.97 Velocity(mm/yr)= %7.1f @\+_ %6.1f\n",$1,$2*$3}' >! tmprate.txt.est
    else if ( $xtype == day ) then
      head -n 1   tmp.rate              |   awk '{printf"0.0 1.12 10p rate(mm/day)= %7.1f @\!+_ %5.1f  nrms= %5.2f  wrms= %5.1f\n",$8,$9,$13,$15}' >! tmprate.txt
    endif
  endif 

######  get ranges ######### 
# skip the fake entries at the top and botom of the file.  first skip line 1, then print the head -n 2  
#    more +2 tmp.xm |  head -n `wc tmp.xm | awk '{print $1  -2}'` >! tmp.xmm 
  if ( $res == "yes" ) then
    cat  tmp.xxm  | awk 'NR > 1 {print $0 }' |  head -n `wc tmp.xm | awk '{print $1  -2}'` >! tmp.xmm 
    set RANGE = `gmt gmtinfo -I.02/10  tmp.xmm `   
    paste tmp.xmm tmp.sig | awk '{ if (NF == 3) print $0}' >! tmp.xrs
  else
    cat  tmp.xm  | awk 'NR > 1 {print $0 }' |  head -n `wc tmp.xm | awk '{print $1  -2}'` >! tmp.xmm 
    set RANGE = `gmt gmtinfo -I.02/10  tmp.xr tmp.xmm `
  endif   
#  echo "RANGE" $RANGE
# set some space for error  bars
#  set r = ( `echo $RANGE | cut -c3- | awk '{FS="/"} {print $1  - ($2-$1)*.10 ,$2 + ($2-$1)*.10,  $3 - ($4-$3)*.10,  $4 + ($4-$3)*.10 }' ` )
  set r = ( `echo $RANGE | cut -c3- | awk -F/ '{print $1  - ($2-$1)*.10 ,$2 + ($2-$1)*.10,  $3 - ($4-$3)*.10,  $4 + ($4-$3)*.10 }' ` )
  if ( $unc_scale != none ||  $order == 1  )   then 
#    set r = ( `echo $RANGE | cut -c3- | awk '{FS="/"} {print $1  - ($2-$1)*.25 ,$2 + ($2-$1)*.25 ,  $3 - ($4-$3)*.5,  $4 + ($4-$3)*.5 }' ` )
    set r = ( `echo $RANGE | cut -c3- | awk -F/ '{print $1  - ($2-$1)*.25 ,$2 + ($2-$1)*.25 ,  $3 - ($4-$3)*.5,  $4 + ($4-$3)*.5 }' ` )
  endif     
# debug for bad range:
#  echo $r
  if ( $xmin != 0 ) set r[1] = $xmin 
  if ( $xmax != 0 ) set r[2] = $xmax
  if ( $ymin != 0 ) set r[3] = $ymin 
  if ( $ymax != 0 ) set r[4] = $ymax

#make sure that horizontal min-max has an aperture
  if( $r[1] == $r[2]  ) then
    set r[1] = `echo $r[1] | awk '{print $1 - 1 }'`
    set r[2] = `echo $r[2] | awk '{print $1 + 1 }'`
  endif

#make sure that vertical min-max has an aperture
  if( $r[3] == $r[4]  ) then
#    set r[3] = `echo $r[3] | awk '{print $1 - 10 }'`
#    set r[4] = `echo $r[4] | awk '{print $1 + 10 }'`
    set r[3] =  -10 
    set r[4] =   10 
  endif
  
# debug for bad range
  set RANGE = "-R"$r[1]"/"$r[2]"/"$r[3]"/"$r[4]
#  echo  "RANGE1 "$RANGE

#
# compute y-axis scales
  set yanot  = 10 
  set yframe = 5 
  set yl = `echo  $r[4]  $r[3] | awk '{ printf "%6d", ( ( $1 - $2 ) / 100 ) + 1   }'`
  set yanot   = ` echo $yanot   $yl |  awk '{ print  $1 * $2 }' `
  set yframe  = ` echo $yframe  $yl |  awk '{ print  $1 * $2 }' ` 
#
# compute x-axis scales unless given!!!
  set dxr = `echo  $r[2]  $r[1] | awk '{ printf "%6d", ($1-$2) }'`
  if ( $cols == 2 ) then
    if ( $dxr >= 11 && $anot == 1 && $frame == 1 ) then       
#       set frame = `echo $r[2]  $r[1] | awk '{print int(($1-$2)/11)+1 }'`
#       set anot = `echo $frame | awk '{print $1/2 }'` 
      set xanot  = 2 
      set xframe = 1
      set xl = `echo  $r[2]  $r[1] | awk '{ printf "%6d", ( ( $1 - $2 ) / 11  ) + 1   }'`
      set anot   = ` echo $xanot   $xl |  awk '{ print  $1 * $2 }' `
      set frame  = ` echo $xframe  $xl |  awk '{ print  $1 * $2 }' ` 
#      echo $frame $anot
    endif   
  else
    if ( $dxr >= 22 && $anot == 1 && $frame == 1 ) then 
#       set frame = `echo $r[2]  $r[1] | awk '{print int(($1-$2)/22)+1 }'`
#       set anot = `echo $frame | awk '{print $1/2 }'` 
      set xanot  = 2 
      set xframe = 1
      set xl = `echo  $r[2]  $r[1] | awk '{ printf "%6d", ( ( $1 - $2 ) / 22  ) + 1   }'`
      set anot   = ` echo $xanot   $xl |  awk '{ print  $1 * $2 }' `
      set frame  = ` echo $xframe  $xl |  awk '{ print  $1 * $2 }' ` 
#      echo $frame $anot
    endif   
  endif

#  label Y axis with annotation  and frame 
  if (  $FRAME <=  (  $NPERPAGE / 2  )  ||  $cols == 1  ) then
    set SCALES =   "-Ba"$anot"f"$frame"/a"$yanot"f"$yframe":(mm):WeSn"
  else 
    set SCALES =   "-Ba"$anot"f"$frame"/a"$yanot"f"$yframe":(mm):wESn"
  endif 
#  plot with error bars and very small circles
  if ( $cols != 1 ) then
    if ( $FRAME ==  $nrow  + 1  ) then
      if ( $NPERPAGE >= 8 ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/1.8i -G0 $SCALES -P -O -K -Y$yskip  -X+3.5i>> $OUT
      else if ( $NPERPAGE == 6 ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/2.6i -G0 $SCALES -P -O -K -Y$yskip  -X+3.5i>> $OUT
      else if ( $NPERPAGE == 4 ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/4.0i -G0 $SCALES -P -O -K -Y$yskip  -X+3.5i>> $OUT
      endif
    else
      if ( $NPERPAGE >= 8 ) then
        if ( -e $OUT ) then
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/1.8i -G0 $SCALES -P -O -K -Y-2.5i >> $OUT
        else
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/1.8i -G0 $SCALES -P    -K -Y8.5i >! $OUT
        endif
      else if ( $NPERPAGE == 6 ) then
        if ( -e $OUT ) then
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/2.6i -G0 $SCALES -P -O -K -Y-3.45i >> $OUT
        else
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/2.6i -G0 $SCALES -P    -K -Y7.55i >! $OUT
        endif
      else if ( $NPERPAGE == 4 ) then
        if ( -e $OUT ) then
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/4.0i -G0 $SCALES -P -O -K -Y-5.2i >> $OUT
        else
          gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX2.8i/4.0i -G0 $SCALES -P    -K -Y5.8i >! $OUT
        endif
      endif
    endif
  else
    if ( $NPERPAGE >= 4 ) then 
      if ( -e $OUT ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/1.8i -G0 $SCALES -P -O -K -Y-2.5i >> $OUT
      else
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/1.8i -G0 $SCALES -P    -K -Y8.5i >! $OUT
      endif
    else if ( $NPERPAGE == 3 ) then
      if ( -e $OUT ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/2.6i -G0 $SCALES -P -O -K -Y-3.45i >> $OUT
      else
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/2.6i -G0 $SCALES -P    -K -Y7.55i >! $OUT
      endif
    else if ( $NPERPAGE == 2 ) then
      if ( -e $OUT ) then
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/4.0i -G0 $SCALES -P -O -K -Y-5.2i >> $OUT
      else
        gmt psxy  tmp.xrs -Ey0.02i $RANGE -Sc0.025i -JX6.5i/4.0i -G0 $SCALES -P    -K -Y5.8i >! $OUT
      endif
    endif
  endif

#  and plot straight line
  gmt psxy  tmp.xm -R -JX -P -O -K >> $OUT

  if ( -e tmprate.txt ) cat tmprate.txt >> tmp.txt
#  print header 
  gmt pstext tmp.txt -R0/1/0/1 -JX -F+jTL -K -P -O -N >> $OUT
#GMT2 pstext tmp.txt -R0/1/0/1 -JX -F+jTL -K -P -O >> $OUT
  if ( $estimate != "" && -e tmprate.txt.est )    gmt pstext tmprate.txt.est  -R0/1/0/1 -JX -F+f9p+jTL -K -P -O -N >> $OUT
#GMT2 if ( $estimate != "" && -e tmprate.txt.est )    pstext tmprate.txt.est  -R0/1/0/1 -JX -F+f9p+jTL -K -P -O >> $OUT
   
  cat tmp.txt | cut -c12- | head -n 1  >!  tmp.txt1
  cat tmp.txt | cut -c12- | tail -n -1  >!  tmp.txt2
  pr -m -t -s -l1  tmp.txt1  tmp.txt2 | head -n 1  >>  base_stats_$psfile

########## 
  if ( $header == yes ) then 
    if (    $FRAME <   $nrow + 1   ) then
       echo " 0.2 -0.25  "$comment  "       p: "$PAGE >! tmp.label
    else 
       echo "-0.8 -0.25  "$comment  "       p: "$PAGE >! tmp.label
    endif
  else 
# practically out of the page
     echo "-10 -20  "$comment  "       p: "$PAGE >! tmp.label
  endif

  if (($N % $NPERPAGE == 0) || ( $#setoffiles == 0 ) ) then
    set yshft = +0.3
#    if ( $FRAME < 4 ) set yshft = -4.8
    gmt pstext tmp.label -R  -U  -JX -F+f10p+jTL -P -O -Y$yshft -N >> $OUT
#GMT2 gmt pstext tmp.label -R  -U  -JX -F+f10p+jTL -P -O -Y$yshft  >> $OUT
    @ PAGE = $PAGE + 1
    set FRAME = 0 
    echo "Created: "$OUT
  endif

end 
finishup:
end

@ PAGE = $PAGE - 1
echo "  "
echo "  "
if ( $PAGE > 1 ) then
echo "Created  postript files    : "$psfile".*" 
else 
echo "  "
echo "Created  postript files    : "$psfile".*" 
endif
echo "  "
echo "Created  baseline statistics : "base_stats_$psfile
echo "  "
echo "To view  postript files    : gs "$psfile".*"
echo "  "
if ( $printer == "" ) then 
	echo "Hardcopy   postript files  :  lpr -s "$psfile".*"
else
	echo "Hardcopy   postript files  :  lpr -s -P$printer   $psfile".*"
endif
echo "  "
echo "  "
endif

\rm -rf tmp.label tmprate.txt tmp.rat tmp.0 tmp.files tmp.files1 tmp.dat tmp.xrs tmp.xy tmp.sig tmp.xr tmp.xrs tmp.xm tmp.rate tmprate.txt tmpxm tmprate.txt.est tmp.txt tmp.txt1 tmp.txt2 tmp.xmm tmp.xxm

#gs $psfile.*
