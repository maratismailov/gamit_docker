#!/bin/csh -f
#
#doc Run makexp in batch mode
#doc
#
# sh_makexp
#
# Purpose      Run makexp in batch mode
#
# Required     Station.info file.
#
# Output       Batch files generated by makexp
#
# sh_makexp  -expt <expt> -gnss <sys> -orbt <orbt> [-sp3file <sp3file>] [-yr <yr>] [-doy <doy>] [-sess <sess>] [-srin] [-nav <file>] [-jclock <jclock>] [-apr <aprfile>] [-xver <char>] [-sinfo <sinfo>]
#                        
#   -expt          4-character survey name for d-, i-, l-file names [required]
#   -gnss <sys>    GNSS (G R C E I J ) [Default G]
#   -lfreq #       Set lower frequency for GNSS (D is GAMIT default).(Added TAH 200511).
#   -orbt          4-character orbit name for g-, j-, t-file names  [required]
#   -sp3file       sp3 file name (cccwwwwd.sp3) [may be blank if jclock is brdc] 
#   -yr <yr>       4 char year of the data to be processed. (yyyy) [default from session.info]
#   -doy <doy>     Starting day of year of data to be processed. (ddd) [default from session.info]
#   -sess <sess>   Session to be searched*. Enter 99 to search all sessions. [Default is 99]
#   -srin          Search all rinex files, for data matching ddd.
#   -nav <file>    Name of rinex navigation file to be used. [Default eorbty.ddd] 
#   -apr <file>    Name of the apriori coordinate file, may be l-file or apr file [Default lexpty.ddd]      
#   -jclock        Source for j-file clocks: sp3 or brdc; brdc the default for now "
#   -xver <char>   1-character x-file version (6th character of x-file). [Default is single-digit year]
#   -sinfo <sinfo> Processing interval (secs), start time (hh mm), number of epochs (num).
#                  If -sinfo is specified, the existing session.info will be deleted and a new
#                  one will be created by makexp. If -sinfo is not specified, the existing session.info
#                  is used to set sinfo parameters. If -default is used then the last record in 
#                  the session.info file is used to set the year, doy of the session and the sinfo
#                  parameters.
#
# * Note RINEX sessions 0 and 1 are assumed to be the same by makexp   
#
# Example:     sh_makexp -expt emed -orbt igsf 
#              sh_makexp -expt emed -orbt igsf -yr 1998 -doy 051 
#              sh_makexp -expt emed -orbt igsf -yr 1998 -doy 051 -sess 1 
#              sh_makexp -expt emed -orbt igsf -yr 1998 -doy 051 -sess 0  -srin -xver c
#              sh_makexp -expt emed -orbt igsf -yr 1998 -doy 051 -sess 99 -srin -nav brdc0510.98n -jclock sp3 -apr emed_9699.apr
#              sh_makexp -expt emed -gnss C -orbt igsf -yr 1998 -doy 051 -sess 99 -srin -nav auto0510.98n -jclock sp3 -sinfo 30 00 00 2880
#
# by Simon McClusky (simon@wegener.mit.edu.edu), July 98.  Last modified by T. Herring 200511
#  
# display comments if no arguments    

echo "Running sh_makexp" 

if ($#argv < 1) then
	sed -e "1d" -e "/by Simon/q" -e "s/#//" $0
	exit
endif
     
# set file names
set sesfo = session.info
set stnfo = station.info

if ( ! -e $stnfo ) then 
  echo " "
  echo "Station.info doesn't exist. This is required!" 
  exit
endif

# initialize variables   
set expt = ''
set nav = ''    
set jclock = 'brdc' 
set sp3file = "''" 
set apr = ''
set year = ''
set yr = ''
set doy = ''
set doyy = `echo $yr $doy | awk '{print $1, $2}'`
set gnss = 'G'
set lf   = 'D'   # Here we set $lf to D (used to set $gnsslf.
set srin = ''
set sess = 99
set slines = 0
set userdoyy = "no"
set usersess = "no"
set int = 0
set hh = 0
set mm = 0
set epochs = 0  
set xver = ''  
set apr = "''"
set sinfo = `echo $int $hh $mm $epochs | awk '{print $1, $2, $3, $4}'`

# override with user input options 
foreach a ($argv)
  switch($a)
    case -expt:
      set expt = $argv[2]
    breaksw   
    case -orbt:
      set orbt = $argv[2]
    breaksw                                                            
    case -sp3file 
      set sp3file = $argv[2] 
    breaksw 
    case -y*:
      set year = $argv[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
      set yr = `sh_year -year $year`  
      set userdoyy = "yes"
      breaksw
    case -doy:
      set doy = $argv[2]
      set userdoyy = "yes"
    breaksw
    case -sess: 
      set sess = $argv[2] 
    breaksw         
    case -gnss:
      set gnss = $argv[2]
    breaksw
     case -lf*:
      set lf  = $argv[2]
    breaksw
   case -srin:
      set srin = 999
    breaksw
    case -nav:
      set nav = $argv[2]
    breaksw      
    case -jclock:
      set jclock = $argv[2]
    breaksw      
    case -apr:
      set apr = $argv[2]
    breaksw   
    case -xver:
      set xver = $argv[2]
    breaksw
    case -sinfo:
      set sinfo = ($argv[2] $argv[3] $argv[4] $argv[5])
      set usersess = "yes"
      if ( $sinfo[4] == "" ) then
        echo "Stop. Not enough session information given: "$sinfo 
        exit
      endif 
    breaksw
  endsw
shift
end

# read session date from session.info                                            
if ( $userdoyy == "no" && -e $sesfo ) then
  set slines = `cat session.info | wc -l`
#  set ydoy = `head -n 3 session.info | tail -n -1`  
  set doy  =  `cat $sesfo | awk ' $1 >= 1 && $1 <= 2100 && $2 >= 1 && $2 <= 366 {printf "%03d ", $2}'`
  set year =  `cat $sesfo | awk ' $1 >= 1 && $1 <= 2100 && $2 >= 1 && $2 <= 366 {printf "%4d ", $1}'` 
  if ( $year != '' && $doy != '' ) then
    set yr = `sh_year -year $year`
  endif
endif            

# read session information from session.info                                            
if ( $usersess == "no" && -e $sesfo ) then
    set slines = `cat session.info | wc -l`
    set sinfo = `cat $sesfo | grep $year | awk -v d=$doy '$2 == d {print $0}' | awk ' $1 >= 1 && $1 <= 2100 && $2 >= 1 && $2 <= 366 {printf "%d %02d %02d %d \n",$4,$5,$6,$7}'`
endif
         
set doyy = `echo $yr[1] $doy`

# Check if input info is consistant
if ( $userdoyy == "no" || $usersess == "no" ) then
  if ( $slines == 0 ) then
    echo " "
    echo "Session.info is not valid or available. Options -yr, -doy, or -sinfo are not specified. "
    echo "yr:    "$doyy[1]
    echo "doy:   "$doyy[2]
    echo "sinfo: "$sinfo
    exit
  endif
endif
if( $doyy[1] == "" || $doyy[2] == "" ) then 
   echo " "
   echo "No input year or day information --stop "$doyy
   exit
endif   
if ( $usersess == "yes" && $#sinfo < 4 ) then 
   echo " "   
   echo "Invalid input session information must be 4 arguments --stop " $sinfo
   exit
endif   
if ( $nav == ""  ) then 
   echo " "
   echo "No input navfile --stop "
   exit
endif   
          
# Move previous session.info if user inputs new session info. 
if ( $usersess == "yes") then 
  echo " "
  echo "User has input new session information. Moving old session.info to: session.info.old"
  if ( -e session.info ) \mv session.info session.info.old
endif
       
# get x-file version (6th character) if not input
if ( $xver == "" ) then
   set yr = `sh_year -year $doyy[1]`
   set xver = $yr[3]
endif  

# Run makexp   
#
# session values are input
# MOD TAH 200511: Mod the GNSS selection passed into makexp to include lower frequecnt
set gnsslf = $gnss
if( $lf != 'D' ) set gnsslf = ${gnss}${lf}
if ( $usersess == "yes" ) then 
  echo "New Session: makexp  $expt $orbt $gnsslf $nav $jclock $sp3file $doyy[1]  $doyy[2] $xver $apr $sinfo[1] $sinfo[2] $sinfo[3] $sinfo[4]"
  makexp  $expt $orbt $gnsslf $nav $jclock $sp3file $doyy[1]  $doyy[2] $xver $apr $sinfo[1] $sinfo[2] $sinfo[3] $sinfo[4]   
#           1     2     3     4    5       6        7         8        9    10    11        12         13       14 
else
# session values read by makexp from session.info
  echo "Old Session: makexp  $expt $orbt $gnsslf $nav $jclock $sp3file $doyy[1] $doyy[2] $xver $apr"  
  makexp  $expt $orbt $gnsslf $nav $jclock $sp3file $doyy[1] $doyy[2] $xver $apr  
#           1     2     3     4    5       6         7        8       9    10 
endif
  
# The end
exit 
