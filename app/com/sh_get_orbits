#!/bin/tcsh -f
#
#doc Get orbit files by day number, center and precision from ftp archives
#doc                                               
#
# Modified to download repro2 orbits (week 658-1831) when igsf requested from 
#   CDDIS.  ig2 files are downloaded and renamed. 
# Last modified Fri Nov 11 22:00:58 EST 2011 T. Herring
# Modified to download repro1 orbits (week 730-1459) when igsf requested from 
#   cddis or sopac.  ig1 files are downloaded and renamed. [Superceded by repro2
#   for CDDIS, above, but remains for SOPAC until further notice.]
# MOD OCh 120626: Add wget option 
# Modfied to fix bug that caused operational rather than repro1 orbits to be
# used prior to GPS Week 1000 (1999/3/7).  King/Floyd/Herring  130924
# Mod RWK 150206: Add gnss option for sh_sp3fit (but doesn't yet download the mgex files)
# Mod RWK 151125: Add ability to get COD GPS+GLONASS file.
# Mod RWK 170524: Add ability to get 'com1' files for all GNSS from CDDIS.
# MOD MAF 170810: Added trap to use ncftp when "ftp" client is actually "gftp", which interacts with the
#                 server differently to legacy "ftp" and is tricky to use for non-interactive sessions.
# MOD RWK 180320: Add ability to get long-named files from CDDIS (initially just COM0MGXFIN). 
# MOD RWK 180503: Rewrite for simpler commands and structure with more download options; allow 
#                 only wget and curl (no 'ftp'); add new scripts sh_cddis, sh_sopac, and sh_get_ultrarapids. 
# MOD MAF 20200814: Updated description of "-srp_param" option in help to match sh_sp3fit


######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 ) then
  cat << END
=====================================================================================
 Get Earth-fixed orbit files (sp3) public  archives and create a g-file
 by fitting the tabulated coordinates to the GAMIT model (sh_sp3fit)

 Required:

 sh_get_orbits -orbit <orbt>  -yr <yr> -doy <doy>

 <orbt>    (replaces -cent and -pre, which will still work for now)
                                                    3-char sp3 name
   igsf   AC-combined GPS-only final                     -> igs
          For CDDIS, repro2 (ig2) GPSW 658-1883          -> igs
   igsr   AC-combined GPS-only rapid                     -> igr
   igsu   AC-combined GPS-only ultra-rapid-              -> igu
   codf   CODE gnss-combined 1-day final (G+R)           -> cof
   code   CODE gnss-combined 3-day final (G+R)           -> cod
   codm   CODE gnss-combined 1-day (MGEX) (G+R+E+C+J)    -> com
   emrf   EMR  GPS-only final (G+R)                      -> emr
   esaf   ESA  gnss-combined final (G+R)                 -> esa
   gfzf   GFZ  gnss-combined final (G+R)                 -> gfz
   gfzm   GFZ  gnss-combined final (MGEX) (G+R+E+C+J)    -> gbm
   grgm   GRGS gnss-combined final (MGEX) (G+R+E)        -> grm
   jaxm   JAX  gnss-combined final (MGEX) (G+R+J)        -> jam
   jplf   JPL  GPS-only final                            -> jpl
   mitf   MIT  GPS-only final                            -> mit
   ngsf   NGS  GPS-only final                            -> ngs
   siof   SOPAC GPS-only final                           -> sio
   sior   SOPAC GPS-only rapid                           -> sir
   siou   SOPAC GPS-only ultra-rapid                     -> siu
   tumm   TUM  gnss-combined final (MGEX) (E+J)          -> tum
   wuhm   Wuhan gnss-combined final (MGEX) (G+R+E+C+J)   -> wum
 <yr> 4 char year of nav data requested
 <doy> 3 char day of year of nav data requested

 Optional:

  -archive <archive> Use only the specified archive, Overruling the default option (cddis)
                 Options available are cddis sopac
  -gnss <gnss code> Create a g-file for the specified GNSS  (G R C E) [default G]
  -ndays <num>   Number of consecutive days of data to retrieve  [default 1]
  -multiday      Construct a multiday t-file from two or more sp3 files [default 1-day]
  -max_fit_tol <val> maximum misfit in meters before a satellite is removed from orbit fit [default 0.1]
  -noacc         Do not exclude satellites base on accuracy codes. [default exclude]
  -nofit         Stop after downloading the sp3 files [default no, do the fit]
  -norename      Keep the original file names (useful mostly for ultra-rapids)
  -eop_ser <ser> Pole and UT1 series is in rotating E-fixed sp3 to inertial g and t [default usno]
  -eop_pth <pth> Path to the pole.ser and ut1.ser files [Default ~/gg/tables]
  -param_norot   Turn off estimation of a terrestrial rotation in orbfit [default yes, estimate]
  -param_trans   Estimate translation in orbfit
  -srp_param <srpprm>  Options for SRP parameterization (radiation model must be one of ECOM1, ECOM2, ECOMC (default) UCLR1, UCLR2)
    ecomc (default): Estimate D Y B Y1 B1 D2 D4 parameters (model must be ECOMC)
    all1pr: Estimate D Y B D1 Y1 B1 (model ECOM1 or ECOMC); corresponds to old 'BERNE' default
    ecom1 : Estimate D Y B Y1 B1 (model ECOM1 or ECOMC); best parameterization GPS Block IIF
    ecom2 : Estimate D Y B B1 D2 D4 (model ECOM2 or ECOMC); best parameterization for most SVs
    allpr : Estimate D Y B D1 Y1 B1 D2 D4 (model ECOMC or ECOM2)
    nopr  : Estimate only D Y B
  -x              Do no clean up temporary files  (useful for debug)

 NOTE: Specifying the orbit type [orbt] will instruct the strict to download the orbit file
       from the archive where it is most likely to be available, trying others if this fails.

=====================================================================================
END
  exit
endif 

##################### SET UP DEFAULTS #############################   
#
# Setup necessary paths and filenames 
set orbt = '' 
set year = ''
set yr = ''
set doy = ''
set site = ''
set eop_pth = ''
set eop_ser = 'usno'
set numd = 1
set archive = ''
set gnss = 'G'        
set makeg = 'yes'
set use_acc = '-u' 
set param_trans = ''
# MOD TAH 190622: Changed default to be consistent with sh_sp3fit.
#     (Defaults are being set in multiple places so make sure all are 
#     changed for consistency).
set srpprm = 'allpr'
set multiday = 'no'
set multidaylist = ''
set max_fit_tol = ('-m' 0.1 )
set maket = ''   
set noclean = ''                          
set norename = ''

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -orb*:
      set orbt = $input[2] 
    breaksw
    case -a*:
      set archive  = $input[2]  
    breaksw   
    case -gnss:
       set gnss = $input[2]
    breaksw 
    case -nd*:
      set numd = $input[2] 
    breaksw 
    case -y*:
      set year = $input[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
      set yr = `sh_year -year $year`
    breaksw 
    case -d*:
      set doy = $input[2]  
    breaksw 
    case -t*:
      set type = $input[2]  
    breaksw 
    case -eop_p*:
      set eop_pth = $input[2]  
    breaksw 
    case -eop_s*:
      set eop_ser = $input[2]  
    breaksw 
    case -noacc:
      set use_acc = ''  
    breaksw 
    case -nofit:
      set makeg = 'no' 
    breaksw 
# Do we need this option? 
    case -maket:
      set maket = '-t' 
    breaksw 
    case -mu*:
      set multiday = yes 
    breaksw 
    case -max_fit_tol:
      set max_fit_tol = ('-m' $input[2]) 
#      echo $max_fit_tol
    breaksw      
    case -param_trans:
      set param_trans = '-param_trans'   
    breaksw  
    case -param_norot
      set param_norot = '-param_norot;'
    case -srp_param:
      set srpprm = $input[2]
    breaksw     
    case -x 
      set noclean = '-x'
    breaksw  
    case -norename 
      set norename = '-norename'    
    breaksw                            
#  These two options superseded by -orbt but temporarily retained:
    case -cent
      set cent = $input[2]
    breaksw 
    case -pre 
      set pre = $input[2]
    breaksw 
 endsw
  if ( $#argv > 0 ) shift argv
end
alldone:

# Set orbt from cent and pre if the latter are used (temporary for backward compatibility) 
if( $orbt == '' ) then
  set orbt = $cent$pre
endif 
       
# ------ Download the requested file(s)-------#

echo "Getting requested orbit files "

# Set timestamp hostname variable  - used for ftp, no longer in script 
# echo hostname `hostname` 
# set ts = "`hostname`:`date '+%H%M%S'`"
  
# Check required fields
if ( ${year} == '' || ${doy} == '' || ${orbt} == '' ) then
  echo "Required fields not complete: orbt: $orbt  yr: $year  doy: $doy --Stop "
  exit
endif 
                  
# Set the 3-character sp3 ID and 1-character latency  
#  if finals, use the 3-character AC name except for CODE, for which codf -> cof,
#  and GFZ, for which gfzm -> gbm 
set pre = `echo $orbt | cut -c 4`
if ( $pre == 'f' ) then
  set prod = `echo $orbt | cut -c 1-3`   
  if( $prod == 'cod' ) then   
    set prod = `echo $orbt | cut -c 1-2,4` 
  endif 
else if ( $orbt == 'gfzm' ) then
    set prod = 'gbm'  
else
  set prod = `echo $orbt | cut -c 1-2,4`
endif

# If ultra-rapids, download the four files for today and the last one from yesterday
if( $pre == 'u' ) then 
  set gpsw = `doy ${yr[1]} ${doy} | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
  set gpsd = `doy ${yr[1]} ${doy} | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
  set doy = `echo ${doy} |  awk '{printf "%03d \n", $1 }'`
  sh_get_ultrarapids -orbt $orbt -yr $yr[1] -doy $doy  $norename $noclean  

# Otherwise loop on the days requested for the rapid or final orbits                       
else 
# Loop on  days 

  #@ sday = ${doy} - 1
  @ sday = `echo "ibase=10; ${doy} - 1" | bc`
  #@ count = ${numd}
  @ count = `echo "ibase=10; ${numd}" | bc`

  while ( ${count} )
    set sday = `echo ${sday} |  awk '{printf "%03d \n", $1+1 }'`
    @ count = ${count} - 1
         
     set gpsw = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
     set gpsd = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`

#    CDDIS has all of the supported files, so try it first
     if( $archive == '' || $archive == 'cddis' ) then 
       echo "Attempting to get orbit $orbt from CDDIS " 
       sh_cddis -orbt $orbt -yr $yr -doy $sday   
       if( ! -e  $prod$gpsw$gpsd.sp3 ) then  
         echo "Requested orbit $orbt not found at CDDIS"
       endif
     endif
     if( $archive == 'sopac' || ! -e  $prod$gpsw$gpsd.sp3 ) then       
       echo "Attempting to get orbit $orbt from SOPAC "
       sh_sopac -orbt $orbt -yr $yr -doy $sday 
       if( ! -e  $prod$gpsw$gpsd.sp3 ) then  
         echo "Requested orbit $orbt not found at SOPAC"
       endif      
     endif 
     if( ! -e  $prod$gpsw$gpsd.sp3 ) then      
       echo "Cannot find orbit $orbt -- exit "
       exit
     endif                                   
  end
endif 

#---Fit the sp3 file to get ICs for a GAMIT orbit-----
                     
if ( $makeg == 'yes' ) then  

  links.arc J2000 ${yr[1]} ${eop_ser} >& /dev/null
  if ( $eop_pth != '' ) then
    \rm pole. ut1.
    ln -s ${eop_pth}/pole.${eop_ser} pole.
    ln -s ${eop_pth}/ut1.${eop_ser} ut1.
   else
     set eop_pth = ~/gg/tables
  endif


  if ( ${pre} == "u" ) then 
# For ultra-rapids, use the most recent file, renamed to the standard 1-day short name
     echo "sh_sp3fit -f ${prod}${gpsw}${gpsd}.sp3 -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${doy} $maket $noclean $max_fit_tol -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm} "
     sh_sp3fit -f ${prod}${gpsw}${gpsd}.sp3 -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${doy} $maket $noclean $max_fit_tol -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm} 
  
  else
#   Loop over downloaded sp3 files
    @ sday = `echo "ibase=10; ${doy} - 1" | bc`
    @ count = `echo "ibase=10; ${numd}" | bc`
               
    while ( ${count} )
      set sday = `echo ${sday} |  awk '{printf "%03d \n", $1+1 }'`
      @ count = ${count} - 1
      set gpsw = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%04d \n", $3}'`
      set gpsd = `doy ${yr[1]} ${sday} | tail -n -2 | head -n 1 | awk '{printf "%1d  \n", substr($7,1,1)}'`
        
      if( $multiday == no ) then 
         echo "sh_sp3fit -f ${prod}${gpsw}${gpsd}.sp3 -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${sday} $maket $noclean $max_fit_tol -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm} "
         sh_sp3fit -f ${prod}${gpsw}${gpsd}.sp3 -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${sday} $maket $noclean $max_fit_tol -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm} 
      else 
         set multidaylist = ($multidaylist ${prod}${gpsw}${gpsd}.sp3)  
      endif     
    end
    if ( $multiday == yes ) then 
      echo "sh_sp3fit -f $multidaylist -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${doy} ${sday} $maket $noclean $max_fit_tol  -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm} "
      sh_sp3fit -f $multidaylist -gnss ${gnss} -o ${orbt} $use_acc -d ${yr[1]} ${doy} ${sday} $maket $noclean $max_fit_tol -eop_ser ${eop_ser} -eop_pth ${eop_pth} ${param_trans} -srp_param ${srpprm}
    endif    
  endif

# Remove some junk created by sh_sp3fit 
# MOD TAH 180531: Added $ to noclean  
  if( "$noclean" != '-x' ) then 
      \rm y${prod}*.sp3 g${prod}*.sp3 t${prod}*.sp3 tfile.* t?????.tmp trot* arc.* orbfit.* NGS* GAMIT* ORBFIT*
  endif 
endif

#Clean up for sh_get_orbits  (for ftp only - no longer used
# if( noclean != '-x' ) then
#  \rm tmp.get.$ts tmp.unc.$ts
# endif

# Thats all.
exit

