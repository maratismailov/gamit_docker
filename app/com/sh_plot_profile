#!/bin/csh -f
#
#doc Create a plot of velocity profiles generated by the gamit utilities program profile
#doc
#
# This shell script for creating a GMT plot of velocity profiles generated
# with the gamit utilities program profile.
# S. McClusky   September 1997.   Last modified by S. McClusky 971205
# 
if ( $#argv == 0   ) then
echo "  "
echo "sh_plot_profiles uses GMT to plot fault normal and fault parallel velocity profiles"
echo "                from the output of the gamit utils program profile"
echo " "
echo "Usage: "
echo "  "
echo "sh_plot_profile -f <file> -xaxis <min/max> -ypar <min/max> -ynorm <min/max> -ps <file>"   
echo " "           
echo "Required: "
echo " "       
echo "  -f  file          : Input profile filename"   
echo " "
echo "Optional:   "
echo " " 
echo "  -xaxis <min/max>  : X axis extents of velocity profile. (calculated if not given)"
echo " " 
echo "  -ynorm <min/max>  : Y axis extents for velocity normal plot (calculated if not given)"
echo " "    
echo "  -ypar <min/max>   : Y axis extents for velocity parallel plot (calculated if not given)"
echo " "    
echo "  -d[elete] sites   : Remove listed site names from plot. Case insensitive"  
echo " " 
echo "  -names            : Add site names to the profile plots"
echo " " 
echo "  -u <val>          : Scale uncertainties by <val> (default = 1)"
echo " " 
echo "  -maxsig           : Maximum sigma to be plotted"
echo " "
echo "  -ps               : Output postscript plotfile name"
echo " "
echo "  -symbol           : Symbol type: triangle, circle, square diamond, star. (t,c,s,d,r) [Def: T]"
echo " "
echo "  -color            : Symbol color: R/G/B [Def: 0/0/0]"
echo " "
echo "Examples:  sh_plot_profile -f profile.out  -ps strc_profile "
echo "sh_plot_profile -f profile.out -xaxis -200 +200 -ypar -20 +60 -ynorm -10 +10  -ps strc_profile "
echo " " 
exit
endif

##################### Set up the defaults ##################################################### 
       
# Input variables   
set delete       = "none"
set PAGE         = -P
set bord_x = "-Bxa20f10"
set bord_par_y = "-Bya10f5"
set bord_norm_y = "-Bya2f1"
set projection   = "-JX6.5i/3.75i"
set range_par = "-R-200/200/-50/50"  
set range_norm = "-R-200/200/-10/10"  
set V            = " "
set psfile       = profile.ps
set xaxis_min    =  0
set xaxis_max    =  0
set ypar_min     =  0
set ypar_max     =  0
set ynorm_min    =  0
set ynorm_max    =  0
set uscale       =  1.0
set names        =  no
set maxsig       =  1000.
set symbol = t
set color = 0/0/0
##################### Decipher the command line ##############################################

while ($#argv > 0 ) 
set input = ( $argv ) 
switch($input[1])
	case -ps:
		set psfile      =  $input[2].ps
		breaksw  
	case -f: 
 		set  file       =  $input[2]
		breaksw 
   case -xaxis:
       set xaxis_min    =  $input[2]
       set xaxis_max    =  $input[3]
       breaksw
   case -ypar:
       set ypar_min    =  $input[2]
       set ypar_max    =  $input[3]
       breaksw
   case -ynorm:
       set ynorm_min    =  $input[2]
       set ynorm_max    =  $input[3]
       breaksw
	case -names: 
 		set  names       =  yes
		breaksw 
	case -u: 
 		set  uscale       =  $input[2]
		breaksw 
	case -maxsig: 
 		set  maxsig       =  $input[2]
		breaksw
	case -symbol: 
 		set  symbol       =  $input[2]
		breaksw 
	case -color: 
 		set  color        =  $input[2]
		breaksw 
	case -d:
	case -delete:
       set delete   =  ""
       set delete   =   ( $delete $input[2] )
       shift input; shift input
       while ( $#input > 0 &&   `echo  $input[1]  | cut -c1` != "-" )
          set inarg =  $input[1]
          if ( `echo  $inarg | cut -c1` != "-" ) then
             set delete    =   ( $delete $inarg )
		      if ( $#input == 1 ) goto alldone
             shift input
          endif
       end
       if ( $#input == 0 ) goto alldone
       breaksw
endsw 
shift argv 
end  
alldone:  

#=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+

# set GMT defaults      
  gmt gmtdefaults -Du >! gmt.conf
  gmt gmtset GMT_COMPATIBILITY 5
  gmt gmtset FONT_LABEL 12p \
             FONT_ANNOT_PRIMARY 12p \
             FONT_TITLE 20p \
             PROJ_LENGTH_UNIT i \
             MAP_FRAME_WIDTH 0.01i

#=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+
echo " "
echo "creating "$psfile

# create header file
head -n 2 $file | tail -n -1 | awk '{print "0  -0.75", $0}' >! tmp.header 
echo $file | awk '{print "0.25  5.25", substr($1,14,4), substr($1,18,3)}' >! tmp.comments 
echo $file | awk '{print "0.25  0.25", substr($1,14,4), substr($1,18,3)}' >> tmp.comments 

# sort the profile file.
head -n 4 $file >! $file.sort
tail -n +5 $file | sort -n >> $file.sort
\mv $file.sort $file

# extract data need for plotting
# extract velocity parallel information
tail -n +5 $file | awk ' $3 < ms*1.0 && $5 < ms*1.0 {print $1,$4,$5*us,$6}' ms=$maxsig us=$uscale  >! tmp.velpar
# extract velocity normal information
tail -n +5 $file | awk ' $3 < ms*1.0 && $5 < ms*1.0 {print $1,$2,$3*us,$6}' ms=$maxsig us=$uscale  >! tmp.velnorm 

#remove unwanted sites from plot
set tmpdelete = ( ` echo $delete |   tr  'a-z' 'A-Z'  `  ) 
set delete  = ( $tmpdelete )  
echo " "
if ( $delete[1] == NONE ) then
  echo "No sites removed from plot"
else
  echo "Sites removed from plot  : "  $delete
  echo " "
  foreach i (`echo $delete`)
    cat tmp.velpar  | egrep -i -v $i >! tmp.delete
    cat tmp.velnorm | egrep -i -v $i >! tmp.delete1
    \mv tmp.delete  tmp.velpar
    \mv tmp.delete1 tmp.velnorm
  end
endif

# extract site name information
cat tmp.velpar | awk '{print $1, $2, substr($4,1,4)}' >! tmp.velpar_names
cat tmp.velnorm | awk '{print $1, $2, substr($4,1,4)}' >! tmp.velnorm_names

# generate the scaling for the plots.
cat tmp.velpar | awk '{print $1,$2}' | gmt gmtinfo -I0.1 >! tmp.ranges      
set rp = `cat tmp.ranges | cut -c3- | awk -F/ '{print ($1-5.0), ($2+5), ($3-5.0), ($4+5.0)}'` 
if ( $xaxis_min != 0 && $ypar_min != 0 ) then
  set range_par = "-R"$xaxis_min"/"$xaxis_max"/"$ypar_min"/"$ypar_max
else if ( $xaxis_min != 0 && $ypar_min == 0 ) then
  set range_par = "-R"$xaxis_min"/"$xaxis_max"/"$rp[3]"/"$rp[4]
else if ( $xaxis_min == 0 && $ypar_min != 0 ) then
  set range_par = "-R"$rp[1]"/"$rp[2]"/"$ypar_min"/"$ypar_max
else 
  set range_par = "-R"$rp[1]"/"$rp[2]"/"$rp[3]"/"$rp[4]
endif
  
cat tmp.velnorm | awk '{print $1,$2}' | gmt gmtinfo -I0.1 >! tmp.ranges      
set rn = `cat tmp.ranges | cut -c3- | awk -F/ '{print ($1-5.0), ($2+5), ($3-5.0), ($4+5.0)}'`
if ( $xaxis_min != 0 && $ynorm_min != 0 ) then
  set range_norm = "-R"$xaxis_min"/"$xaxis_max"/"$ynorm_min"/"$ynorm_max
else if ( $xaxis_min != 0 && $ynorm_min == 0 ) then
  set range_norm = "-R"$xaxis_min"/"$xaxis_max"/"$rn[3]"/"$rn[4]
else if ( $xaxis_min == 0 && $ynorm_min != 0 ) then
  set range_norm = "-R"$rn[1]"/"$rn[2]"/"$ynorm_min"/"$ynorm_max
else 
  set range_norm = "-R"$rn[1]"/"$rn[2]"/"$rn[3]"/"$rn[4]
endif

  set yspread = `echo  $rp[3]  $rp[4] | awk '{ printf "%6d",  $2 - $1}'`
  if ( $yspread <= 3 )  set yanot_p  = 0.5
  if ( $yspread > 3 )   set yanot_p  = 1
  if ( $yspread > 10 )  set yanot_p  = 2
  if ( $yspread > 20 )  set yanot_p  = 5
  if ( $yspread > 40 )  set yanot_p  = 10
  if ( $yspread > 70 )  set yanot_p  = 15
  if ( $yspread > 100)  set yanot_p  = 20
  if ( $yspread > 500)  set yanot_p  = 100
  if ( $yspread > 1000)  set yanot_p  = 200
  set  yframe_p = ` echo $yanot_p | awk '{print $1 / 2 }'`

  set yspread = `echo  $rn[3]  $rn[4] | awk '{ printf "%6d",  $2 - $1}'`
  if ( $yspread <= 3 )  set yanot_n  = 0.5
  if ( $yspread > 3 )   set yanot_n  = 1
  if ( $yspread > 10 )  set yanot_n  = 2
  if ( $yspread > 20 )  set yanot_n  = 5
  if ( $yspread > 40 )  set yanot_n  = 10
  if ( $yspread > 70 )  set yanot_n  = 15
  if ( $yspread > 100)  set yanot_n  = 20
  if ( $yspread > 500)  set yanot_n  = 100
  if ( $yspread > 1000)  set yanot_n  = 200
  set  yframe_n = ` echo $yanot_n | awk '{print $1 / 2 }'`

  set xspread = `echo  $rp[1]  $rp[2] | awk '{ printf "%6d",  $2 - $1}'`
  if ( $xspread <= 10 )   set xanot  = 0.5
  if ( $xspread > 10  )   set xanot  = 1
  if ( $xspread > 50  )   set xanot  = 5
  if ( $xspread > 100 )   set xanot  = 10
  if ( $xspread > 200 )   set xanot  = 20
  if ( $xspread > 400 )   set xanot  = 40
  if ( $xspread > 600 )   set xanot  = 60
  if ( $xspread > 1000)   set xanot  = 100
  set  xframe = ` echo $xanot | awk '{print $1 / 2 }'`  
#  set border_par  = "-Bxa${xanot}f$xframe -Bya${yanot_p}f$yframe_p+l'mm/yr' -BWeSn" 
#  set border_norm = "-Bxa${xanot}f$xframe -Bya${yanot_n}f$yframe_n+l'mm/yr' -BWeSn" 
set bord_x = "-Bxa${xanot}f$xframe"
set bord_par_y = "-Bya${yanot_p}f$yframe_p"
set bord_norm_y = "-Bya${yanot_n}f$yframe_n"

set projection =  "-JX6.5i/3.75i"

echo " PROJECTION,     RANGE PARALLEL,         RANGE NORMAL,      BORDER PARALLEL,  BORDER NORMAL"
echo $projection $range_par $range_norm $bord_x$bord_par_y $bord_x$bord_norm_y 

# now plot the files

#gmt psxy tmp.velnorm $projection $range_norm $border_norm -Ey -St0.02i $PAGE -V -K  >! $psfile 
#gmt psxy tmp.velpar  $projection $range_par  $border_par  -Ey -St0.02i $PAGE -V -O -Y5.0i >> $psfile 
gmt pstext tmp.header -R0/8.5/0/11.0 -Jx1i/1i -h0 -F+f10p,1+jML -N $PAGE $V -K >! $psfile
gmt pstext tmp.comments -R0/8.5/0/11.0 -Jx1i/1i -h0 -F+f20p,1+jML -N  $PAGE $V -K -O >> $psfile 
if ( $names == "yes" ) then 
  gmt pstext tmp.velnorm_names $projection $range_norm -F+f5p+jML $PAGE $V -K -O -X0.05i    >> $psfile 
  gmt psxy tmp.velnorm $projection $range_norm $bord_x+l'Fault Normal Distance (km)' $bord_norm_y+l'mm/yr' -BWeSn+t'Fault Normal Velocity'  -Ey0.05i -W1p,${color} -G${color} -S${symbol}0.09i $PAGE $V -K -O -X-0.05i    >> $psfile 
  gmt pstext tmp.velpar_names  $projection $range_par -F+f5p+jML $PAGE $V -K -O -Y5i -X0.05i >> $psfile 
  gmt psxy tmp.velpar  $projection $range_par  $bord_x+l'Fault Normal Distance (km)' $bord_par_y+l'mm/yr' -BWeSn+t'Fault Parallel Velocity' -Ey0.05i -W1p,${color} -G${color} -S${symbol}0.09i $PAGE $V    -O -X-0.05i     >> $psfile 
else
  gmt psxy tmp.velnorm $projection $range_norm $bord_x+l'Fault Normal Distance (km)' $bord_norm_y+l'mm/yr' -BWeSn+t'Fault Normal Velocity'  -Ey0.05i -W1p,${color} -G${color} -S${symbol}0.09i $PAGE $V -K -O     >> $psfile 
  gmt psxy tmp.velpar  $projection $range_par  $bord_x+l'Fault Normal Distance (km)' $bord_par_y+l'mm/yr' -BWeSn+t'Fault Parallel Velocity' -Ey0.05i -W1p,${color} -G${color} -S${symbol}0.09i $PAGE $V    -O -Y5i >> $psfile 
endif
                                                                                                                                                            
cleanup: 
echo "  "
echo "Created  postscript file     :" $psfile
echo "  "
echo "Sorted velocity profile file :" $file
echo "  "
echo "To view  postript files      : gs" $psfile  
echo "  "
echo "Hardcopy   postript file     : lpr "$psfile  

\rm tmp.ranges tmp.velnorm tmp.velpar tmp.header tmp.velnorm_names tmp.velpar_names

exit
