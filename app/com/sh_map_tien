#!/bin/csh -f 
#
#doc Create a GMT map of the Tein Shan (used by sh_plotvel)
#doc
#
echo " " 
echo "Arguments for sh_map_tien:" $argv 
#
# This shell script for creating a GMT map of the Tien Shan, designed to serve as
# a template for other regions, is based on sh_map_turkey written by M.Burc Oral 
# and stored in /contributions/oral/com_globk.  The modest list of arguments 
# interface easily with sh_plotvel, which can use this or a similar script to
# create the maps onto which station velocities are plotted.  Enhancements to
# the maps can be accomplished to some extent with direct input to sh_plotvel
# (i.e., without calling this script) or by customizing this script.
#  R. King and S. McClusky   November 1995.   Last modified by S. McClusky 970712
# 
if ( $#argv == 0   ) then
echo "  "
 echo " Called sh_map_tien to create a GMT map."
echo " "
echo " Usage: "
echo "  "
echo "      sh_map_tien -ps <file> -o <options> -page <option> -color <option> "   
echo " "           
echo "      Required: "
echo " "       
echo "        -ps  file     : Name of output postscript file"   
echo " "
echo "      Required if called from another script that will continue mapping (e.g. sh_plotvel):"
echo " "
echo "         -c     "
echo " " 
echo "      Optional:   "
echo " "
echo "        -o  options   : GMT projection options < size range borders > "
echo " " 
echo "        -page  option : Page orientation   P for portrait (default),  L for landscape "          
echo " "
echo "        -color option : yes or no (default)    "
echo " "
echo "   Example:  sh_map_tien -ps tienmap.ps  -o -R22/44/30/42 -Jm0.3i -Bxf1.0 -Byf1.0 -BWSen -color yes "
echo " " 
echo "   Requirement:   The location of the maps on your system must be set as 'root_map'."
echo "                  The default is '~/gg/maps' where 'gg' is an alias in your home    "
echo "                  directory pointing to the level above 'gamit' and 'kf'."
echo " "
exit
endif

##################### Set up the defaults ##################################################### 
       
set root_map = ~/gg/maps 

# Input variables   
set OPTION = ""
set PAGE = -P
set color = no 
set called = no 

# Change any of the options below to "yes" to enable plotting of these features
set topo       = yes
set psscale    = yes
set labels     = no
set labels2    = no
set labels3    = no
set labels4    = no
set nuvel1     = no 
set boundary   = no 
set graben     = no  
set erzincan   = no  
set pattern    = no
set ocean_blue = no
set regions    = no
set tectonics  = no  
set tectonics1 = no     
set tectonics2 = no
# set the minimum area of features like lakes or islands to be plotted
set min_area   = 500
set coast_res  = l
set illu_file  =  "none"
#set palette    =  $root_map/color4_x1000.cpt
#set palette    =  $root_map/color4.cpt
#set palette    =  $root_map/color8.cpt
set palette    =  $root_map/color8_m.cpt
#set palette    =  $root_map/tien_color_km.cpt
#set topo_file  =  $root_map/etopo5.grd
#set palette    =  $root_map/simon_inc.cpt
#set palette    =  $root_map/tien_color.cpt
#set topo_file  =  $root_map/E020N60.grd
#set illu_file  =  $root_map/E020N60i.grd
set illu_file  =  $root_map/topo62i.grd
set topo_file  =  $root_map/topo62.grd  
#set topo_file   = /data13/brad/GRAVITY/westdata/ussr_prc_india_pakistan_topo_mean.grd
# gravity stuff
#set palette     = /data13/brad/GRAVITY/westdata/boug.cpt
#set grav_file   = /data13/brad/GRAVITY/westdata/ussr_prc_india_pakistan_boug_mean.grd 
#set grav_file   = /data13/brad/GRAVITY/westdata/test.grd 
#set illu_file   = /data13/brad/GRAVITY/westdata/ussr_prc_india_pakistan_boug_mean_I.grd 
#set illu_file   = /data13/brad/GRAVITY/westdata/I.grd 

# Internal controls 
set border       = ( -Bxf1a2 -Byf1a2 -BWSen )
set projection   = "-JM9i"
set range        = "-R65/85/35/45 " 
set raster       = -0
set c = "/0/0/0" 
set text_color = "-G0/0/0"
#set text_box = "-W255/255/255 -C0.005i/0.005i"  
set text_box = ""  
if ( $topo == yes ) then  
  set yshift       = '0.5i'
else 
  set yshift       = '1.5i'
endif    
set V            = " "
#set V            = -V

##################### Decipher the command line ##############################################

while ($#argv > 0 ) 
set input = ( $argv ) 
switch($input[1])
	case -ps:
		set psfile      =  $input[2]
		breaksw  
	case -R*: 
 		set  range      =  $input[1]
		breaksw 
	case -J*: 
 		set  projection =  $input[1]
		breaksw
	case -B*: 
 		set border      =  $input[1]
		breaksw
	case -page:
		set PAGE    =  -$input[2]  
       if ( $input[2] == "L" ) set PAGE = " "
		breaksw 
   case -c
       set called      = yes
       breaksw
	case -color:
		if (  $input[2] == yes ) then 
	    	set c = "/0/0/0" 
	    	set text_color = "-G0/0/0"
		endif 
		breaksw	
endsw 
shift argv 
end

# set GMT defaults      
if ( $called != yes ) then
  gmt gmtdefaults -Du >! gmt.conf
  gmt gmtset GMT_COMPATIBILITY 5
  gmt gmtset FONT_LABEL 10p \
             FONT_ANNOT_PRIMARY 10p \
             FONT_TITLE 10p \
             MAP_FRAME_WIDTH 0.03i \
             PROJ_LENGTH_UNIT i \
             FORMAT_GEO_MAP +ddd:mm:ss
#            FORMAT_GEO_MAP ddd:mm:ssF
endif

# If the projection options are not input, set them now from the script defaults

if ( $#OPTION != 3 )  set OPTION  =  ( $range $projection $border ) 
echo " "
echo "SH_MAP_TIEN - range, projection, borders : "  $OPTION  
echo " "

# Set options for enhanced maps
set OPTION2   = (   $PAGE " -h0  -K -O " ) 
 
##################### Create the map ##############################################

# Coastlines or topography from GMT
if ( $topo != yes ) then 
  echo "Plotting coastlines"
  if ( $boundary != yes ) then 
    if ( $pattern != yes ) then
      if ( $ocean_blue != yes ) then
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -D$coast_res  -A$min_area  -Y$yshift                   >! $psfile
      else 
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -S180/240/255  -D$coast_res   -A$min_area  -Y$yshift   >! $psfile 
      endif
    else  
      if ( $ocean_blue != yes ) then
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -Gp0.25/31    -D$coast_res  -A$min_area  -Y$yshift     >! $psfile
      else  
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -Gp0.25/31  -S180/240/255  -D$coast_res  -A$min_area  -Y$yshift >! $psfile
      endif
    endif
  else
    if ( $pattern != yes ) then
      if ( $ocean_blue != yes ) then
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -N1/1p,,- -D$coast_res  -A$min_area  -Y$yshift                 >! $psfile
      else 
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -N1/1p,,- -S180/240/255  -D$coast_res  -A$min_area -Y$yshift   >! $psfile
      endif 
    else                                                
      if ( $ocean_blue != yes ) then
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -N1/1p,,- -Gp0.25/31 -D$coast_res  -A$min_area  -Y$yshift      >! $psfile 
      else
        gmt pscoast  $OPTION  -W1p   $PAGE -K  -N1/1p,,- -Gp0.25/31 -S180/240/255 -D$coast_res -A$min_area  -Y$yshift >! $psfile
      endif 
    endif     
  endif
else 
  echo " "                    
  echo "Plotting topography: "$topo_file
  if ( $psscale == yes ) then
    set paletteXY  = (  -D4.0i/0.125i/7.50i/0.125ih -L   -B+t'ELEVATION'  ) 
    gmt psscale   -C$palette  $paletteXY             $V  $PAGE  -K                 $raster >! $psfile
    if ( $illu_file == "none" ) then
      gmt grdimage  -C$palette  $topo_file                $OPTION  $V  $PAGE  -K  -O -Y$yshift   $raster -V >> $psfile   
    else
      gmt grdimage  -C$palette  $topo_file  -I$illu_file  $OPTION  $V  $PAGE  -K  -O -Y$yshift   $raster -V >> $psfile   
    endif
  else
    if ( $illu_file == "none" ) then 
      gmt grdimage  -C$palette  $topo_file               $OPTION  $V  $PAGE  -K     -Y$yshift   $raster -V >! $psfile
    else   
      gmt grdimage $topo_file -C$palette -I$illu_file  $OPTION  $V  $PAGE  -K     -Y$yshift   $raster -V >! $psfile
#      gmt grdview $topo_file -I$illu_file -G$grav_file  -C$palette -Qs  $OPTION  $V  $PAGE  -K  -Y$yshift  -V >! $psfile
#      gmt grdview $grav_file -I$illu_file -C$palette -Qi100 -p60/30 -Jz0.1i $OPTION  $V  $PAGE  -K  -Y$yshift  -V >! $psfile
    endif
  endif
  echo "Plotting coastlines"
  if ( $boundary != yes ) then
      if ( $ocean_blue != yes ) then
        gmt pscoast -W3p  $OPTION  $V  -P  -K  -O  -D$coast_res -A$min_area     >> $psfile 
      else  
        gmt pscoast -W3p  $OPTION  $V  -P  -K  -O -S180/240/255 -D$coast_res -A$min_area     >> $psfile
      endif 
   else
      if ( $ocean_blue != yes ) then
        gmt pscoast -W3p  $OPTION  $V  -P  -K  -O  -N1/1p,,-  -D$coast_res -A$min_area >> $psfile
      else   
# Dark_Blue        pscoast                        -W3p  $OPTION  $V  -P  -K  -O  -N1/1p,,- -S30/144/255  -D$coast_res -A$min_area >> $psfile 
# Light_Blue       pscoast                        -W3p  $OPTION  $V  -P  -K  -O  -N1/1p,,- -S230/240/255 -D$coast_res -A$min_area >> $psfile 
        gmt pscoast -W3p  $OPTION  $V  -P  -K  -O  -N1/1p,,- -S180/240/255 -D$coast_res -A$min_area >> $psfile 
      endif
  endif
endif 
# Optional enhancements - edit for your own purposes
if ( $tectonics == yes ) then
  echo " "
  echo "Plotting tectonic features" 
#GMT2 psxy  $root_map/turk_tectonic_lakes            $OPTION $OPTION2 -W1p                          >> $psfile
  gmt psxy  $root_map/turk_tectonic_fault1           $OPTION $OPTION2 -W3p,$c                        >> $psfile
  gmt psxy  $root_map/turk_tectonic_fault2           $OPTION $OPTION2 -W1p,$c                        >> $psfile
  gmt psxy  $root_map/turk_tectonic_fault3           $OPTION $OPTION2 -W1p,$c                        >> $psfile
  gmt psxy  $root_map/turk_tectonic_fault_dashed     $OPTION $OPTION2 -W1p,$c,30:0                  >> $psfile
  gmt psxy  $root_map/turk_tectonic_thrust_L         $OPTION $OPTION2 -W3p,$c         -Sf.50/.07+l   >> $psfile
#gmt psxy  $root_map/turk_tectonic_thrust_L         $OPTION $OPTION2 -W3p,$c         -Sf0.50/.07+l  >> $psfile
  gmt psxy  $root_map/turk_tectonic_thrust_R         $OPTION $OPTION2 -W3p,$c         -Sf.50/.07+r   >> $psfile
#gmt psxy  $root_map/turk_tectonic_thrust_R         $OPTION $OPTION2 -W3p,$c         -Sf.50/.07+r  >> $psfile
  gmt psxy  $root_map/turk_tectonic_thrust_R_dashed  $OPTION $OPTION2 -W1p,$c,30:0   -Sf.25/.05+r   >> $psfile
#gmt psxy  $root_map/turk_tectonic_thrust_R_dashed  $OPTION $OPTION2 -W1p,$c,30:0   -Sf.25/.05+r  >> $psfile
  gmt psxy  $root_map/turk_tectonic_thrust_L_dashed  $OPTION $OPTION2 -W1p,$c,30:0   -Sf.25/.05+l   >> $psfile
#gmt psxy  $root_map/turk_tectonic_thrust_L_dashed  $OPTION $OPTION2 -W1p,$c,30:0   -Sf.25/.05+l  >> $psfile
  gmt psxy  $root_map/turk_tectonic_graben_r         $OPTION $OPTION2 -W1p,$c         -Sf.10/.02+r   >> $psfile
#gmt psxy  $root_map/turk_tectonic_graben_r         $OPTION $OPTION2 -W1p,$c         -Sf.10/.02+r  >> $psfile
  gmt psxy  $root_map/turk_tectonic_graben_l         $OPTION $OPTION2 -W1p,$c         -Sf.10/.02+l   >> $psfile
#gmt psxy  $root_map/turk_tectonic_graben_l         $OPTION $OPTION2 -W1p,$c          -Sf.10/.02+l >> $psfile
endif
 
if ( $tectonics1 == yes ) then
  echo " "
  echo "Plotting tectonic features" 
#  gmt psxy  /data5/rwk/topo_maps/me_faults.car           $OPTION $OPTION2 -W3p,$c                        >> $psfile
#  gmt psxy  /data5/rwk/topo_maps/na_faults.car           $OPTION $OPTION2 -W2p,$c                        >> $psfile
  gmt psxy  /data5/rwk/topo_maps/platebound.car           $OPTION $OPTION2 -W2p,$c                        >> $psfile
endif
if ( $tectonics2 == yes ) then
  echo " "
  echo "Plotting tectonic features" 
  gmt psxy  /data9/ftp/pub/gps/simon/temp/cauc_tectonic_faults2           $OPTION $OPTION2 -W1p,$c        >> $psfile
#  gmt pstext /data9/ftp/pub/gps/simon/temp/cauc_faults.num $OPTION  -O  -K  $PAGE  $text_color          >> $psfile  
  gmt psxy  /data9/ftp/pub/gps/simon/temp/cauc_tectonic_thrustL  $OPTION $OPTION2 -W1p,$c  -Sf0.25/.06+l  >> $psfile
  gmt psxy  /data9/ftp/pub/gps/simon/temp/cauc_tectonic_thrustR  $OPTION $OPTION2 -W1p,$c  -Sf0.25/.06+r  >> $psfile
endif

#Grabens
if ( $graben == yes ) then 
  echo " "
  echo "Plotting grabens"
  gmt psxy $root_map/turk_tectonic_graben_R         $OPTION $OPTION2  -W1p,$c  -Sf.1/.01+r              >>  $psfile        
  gmt psxy $root_map/turk_tectonic_graben_L         $OPTION $OPTION2  -W1p,$c  -Sf.1/.01+l              >>  $psfile        
endif

#ERZINCAN Basin 
if ( $erzincan == yes ) then
  echo " "
  echo "Plotting erzincan basin" 
  gmt psxy  $root_map/turk_tectonic_basin  -h0 $OPTION  -O -K $PAGE  -Gp.5/31  >> $psfile 
endif  

#Nuvel1 ( needs to be adjusted.)
if ( $nuvel1 == yes ) then
  echo " "
  echo "Plotting NUVEL1 plate boundaries"
  gmt psxy    $root_map/nuvel1_plates_mod   $OPTION $OPTION2  -W5p,255/0/0 -:  >> $psfile
endif

if ( $labels == yes ) then         
  echo " "                    
  echo "Plotting labels: "$root_map/turk_labels
  set r = `echo $range | cut -c3- | awk '{FS="/"} {print $1, $2, $3, $4}'`   
  awk '$1 > lonmin/1 && $1 < lonmax/1 && $2 > latmin/1 && $2 < latmax/1 {print $1,$2,$3"p,"$5,$4,$6,$7,$8,$9,$10,$11}' lonmin=$r[1] lonmax=$r[2] latmin=$r[3] latmax=$r[4] $root_map/turk_labels >! tmp.labels
  gmt pstext tmp.labels $OPTION -F+f+a+j -O  -K  $PAGE  $text_color    >> $psfile  
endif   

if ( $labels2 == yes ) then
  echo " "                    
  echo "Plotting labels2: "$root_map/turk_labels2
  set r = `echo $range | cut -c3- | awk '{FS="/"} {print $1, $2, $3, $4}'`   
  awk '$1 > lonmin/1 && $1 < lonmax/1 && $2 > latmin/1 && $2 < latmax/1 {print $1,$2,$3"p,"$5,$4,$6,$7,$8,$9,$10,$11}' lonmin=$r[1] lonmax=$r[2] latmin=$r[3] latmax=$r[4] $root_map/turk_labels2 >! tmp.labels
  gmt pstext tmp.labels $OPTION -F+f+a+j -O  -K  $PAGE  $text_color    >> $psfile  
endif   

if ( $labels3 == yes ) then
  echo " "                    
  echo "Plotting labels3: "$root_map/turk_labels3
  set r = `echo $range | cut -c3- | awk '{FS="/"} {print $1, $2, $3, $4}'`   
  awk '$1 > lonmin/1 && $1 < lonmax/1 && $2 > latmin/1 && $2 < latmax/1 {print $1,$2,$3"p,"$5,$4,$6,$7,$8,$9,$10,$11}' lonmin=$r[1] lonmax=$r[2] latmin=$r[3] latmax=$r[4] $root_map/turk_labels3 >! tmp.labels
  gmt pstext tmp.labels $OPTION -F+f+a+j -O  -K  $PAGE  $text_color $text_box  >> $psfile  
endif

if ( $labels4 == yes ) then
  echo " "                    
  echo "Plotting labels3: "$root_map/marm_labels
  set r = `echo $range | cut -c3- | awk '{FS="/"} {print $1, $2, $3, $4}'`   
  awk '$1 > lonmin/1 && $1 < lonmax/1 && $2 > latmin/1 && $2 < latmax/1 {print $1,$2,$3"p,"$5,$4,$6,$7,$8,$9,$10,$11}' lonmin=$r[1] lonmax=$r[2] latmin=$r[3] latmax=$r[4] $root_map/marm_labels >! tmp.labels
  gmt pstext tmp.labels $OPTION -F+f+a+j -O  -K  $PAGE  $text_color    >> $psfile  
endif
   
if ( $regions == yes ) then
  echo " "                    
  echo "Plotting regions: "$root_map/regions
  gmt psxy    $root_map/regions   $OPTION $OPTION2  -W5p,0/0/0 -L  -:  >> $psfile
endif   
              
# Terminate the plot if not called by another script 
if ( $called == no ) then
  echo "Created  postscript file    :" $psfile
  echo "  "
  echo "To view  postript file      : gs" $psfile  
  echo "  "
  echo "Hardcopy   postript file    :  lpr "$psfile  
  # mark the end of ps file
  gmt pstext <<ENDD      $OPTION  -O   $PAGE -N   -U   >> $psfile  
ENDD

# Otherwise print a message and return to the calling script
else
  echo " "
  echo "sh_map_tien produced plot: " $psfile
  echo " "    
endif

exit
