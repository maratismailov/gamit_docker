#!/bin/csh -f    
#
#doc Generate realistic sigmas from a time series 
#doc
#
# Written by T. Herring 2004
# Last moddified by R. King 28 Feb 2005
# Modified T. Herring 070804 to add median calculation for RW values
# Modified T. Herring 090527 to use tsfit summary files
# Modified T. Herring 130302 to use gridded, hieractical stab list.  Feature 
#                            invoked with -stabrad option).  
# Format bug fix in outputing median values,  R, King 170118
#
# Script to generate:
# (a) mar_neu lines for globk to achieve a realistic sigma based on the averaging characteristics
# (b) use_site list for sites with RW noise less than a specified maximum
# (c) stab_site list for sites with RW noise less than a specified maximum
#
if( $#argv == 0 ) then
   echo 'sh_gen_stats <options>'   
   echo ' ' 
   echo '  Generate Markov, use_site, and stab_site commands for GLOBK based '
   echo '  on realistic sigmas determined from an enfit analysis of a time series'
   echo ' ' 
   echo ' Required: '
   echo ' ' 
   echo '  -na <name>      Generic file for ensum values file.'     
   echo ' or '
   echo '  -ir <iroot>     Root for input values file.  Expected name va<iroot>.ens ' 
   echo ' or '
   echo '  -ts <tsfit summary file>  Summary file generated by tsfit '
   echo '                 (Real_Sigma command must be used in tsfit)'
   echo ' '  
   echo ' Only -ir, -ts or -na option should be used in one run'
   echo ' ' 
   echo ' Optional: '
   echo ' ' 
   echo '  -or oroot     Root for output files  use_<oroot>.use   rw_<oroot>.rw  stab_<oroot>.stab;' 
   echo '                Default <iroot> or <name/tsfit name> minus extent '
   echo '  -enf enf_cmd  Name of ENFIT command file (if omitted do not run enfit). Not used with -ts option'   
   echo '  -minnum n     Minimum number of observations for a site to be included; default 70 '
   echo '  -minrw val    Minimum random walk (Markov) value to be added for each site; default 0.05 mm^2/yr (0.2 mm/sqrt(yr))'
   echo '  -maxuse val   Maximum horizontal random walk value for a site to be included in the solution; default 2.0 mm^2/yr'
   echo '  -maxstab val  Maximum horizontal random walk value for a site to be used for stabilization; default 0.5 mm^2/yr '
   echo ' New Feature 130302:'
   echo '  -stabrad val  Radius into which to group stab sites (km) Default 0 km so feature not used for backwards'   
   echo '                compatibility.  -stabrad 220 would make a 2 deg grid with hierarchical list of stabilization'
   echo '                sites at each grid point if needed'
   echo ' ' 
   exit
endif
#
set oroot = 'NONE'
set tsin  = 'NONE'
set vname = 'NONE'
set minrw = 0.05
set maxuse = 2.0
set maxstab = 0.5   
set minnum = 70 
set enfcmd = 'null' 
set stabrad = 0       #  220 km would make 2deg grid

# Now read the arguments
foreach a ($argv)
   switch($a)
       case -or:
          set oroot = $argv[2]
          breaksw
       case -ir:
          set iroot = $argv[2]
          set vname = "va"$iroot".ens"
          if( $oroot == 'NONE' ) then
             set oroot = $iroot
          endif
          breaksw  
       case -ts:
          set tsin = $argv[2]
          if( $oroot == 'NONE' ) then
             set oroot = $tsin:r
          endif
          breaksw
       case -na:
          set vname = $argv[2]
          if( $oroot == 'NONE' ) then
             set oroot = $vname:r
          endif
          breaksw
       case -enf:
         set enfcmd = $argv[2]
         breaksw
       case -minnum:
         set minnum = $argv[2] 
         breaksw
       case -minrw:
         set minrw = $argv[2] 
         breaksw
       case -maxuse:
         set maxuse = $argv[2] 
         breaksw
       case -maxstab:
         set maxstab = $argv[2] 
         breaksw
       case -stabrad:
         set stabrad = $argv[2] 
         breaksw
   endsw
shift
end
#
#goto skip
if( $tsin == 'NONE' ) then
   echo "Running ensum with $vname and minimum obs $minnum"
   ensum $minnum -RS sut vat $vname >&! /dev/null
   # Extract the rate signa and the duration from the summary file
   grep 'N  1' sut | awk '{print substr($1,1,8),$13, $10}' >! t.n
   grep 'E  1' sut | awk '{print $10}' >! t.e
   grep 'U  1' sut | awk '{print $10}' >! t.u
   # Remove any deleted data (_XPS rename in globk)
   paste '-d ' t.n t.e t.u | grep -v '^...._X.. ' >! t.a
else
   echo "Using $tsin with minimum obs $minnum"
   # Extract the rate signa and the duration from the summary file
   grep 'N  1' $tsin  | awk -v m=$minnum '{if ($4 >= m) {print substr($1,1,8),$13, $10,$5}}' | sort >! t.n
   grep 'E  1' $tsin  | awk -v m=$minnum '{if ($4 >= m) {print substr($1,1,8),$10,$5}}'| sort  >! t.e
   grep 'U  1' $tsin  | awk -v m=$minnum '{if ($4 >= m) {print substr($1,1,8),$10,$5}}'| sort  >! t.u
#   wc t.n t.e t.u
   # Remove any deleted data (_XPS rename in globk)
#   paste '-d ' t.n t.e t.u | grep -v '^...._X.. ' | awk '{print $1, $2, $3, $5, $7, $4, $6, $8}'>! t.a
   join -j 1 t.n t.e >! t.b ; join -j 1 t.b t.u | grep -v '^...._X.. ' | awk '{print $1, $2, $3, $5, $7, $4, $6, $8}' >! t.a
endif 


if( -e $enfcmd && $tsin == 'NONE' ) then 
   echo "Running enfit with  $enfcmd and $vname"
   enfit $minnum -RS -f $enfcmd suf vaf $vname >&! /dev/null
#  Extract the sigma of the rate and get the duration from the t.a file
   grep 'N  1' suf | awk '{print substr($1,1,8),$8,$5}' >! t.n
   grep 'E  1' suf | awk '{print $8,$5}' >! t.e
   grep 'U  1' suf | awk '{print $8,$5}' >! t.u
#
# Remove any deleted data (_XPS rename in globk)
   paste '-d ' t.n t.e t.u | grep -v '^...._X.. ' | awk '{print $1, $2, $4, $6, $3,$5,$7}' >! t.f
else
   \rm t.f; touch t.f
endif
#
skip:
# Now get the list of sites
set sites = `awk '{print substr($1,1,4)}' t.a | sort -u`
set num = `echo $sites | wc -w`
echo "There are $num sites to be processed"
#
# Process each site
set orw = "rw_${oroot}.rw"
if( $tsin == 'NONE' ) then
   echo "# Random walk process noise generated from $vname "`date` >! $orw
else
   echo "# Random walk process noise generated from tsfit summary $tsin "`date` >! $orw
endif
echo "# Minimum RW process noise $minrw mm^2/yr" >> $orw
echo "#" >> $orw
foreach s (`echo $sites`)
   set subsite = `grep $s t.a | awk '{print $1}'`
   echo "Processing $s with subsites $subsite"
   \rm t.rw ; touch t.rw
   foreach ss (`echo $subsite`)
      set dur = `grep $ss t.a | awk '{print $2}'`  
      set both = `grep $ss t.f | wc -w`
# MOD TAH 150518: Added ^2 to height entry to get variance instead of standard deviation (changed on three lines)
      if( $both == 0 ) then   
        grep $ss t.a | awk '{print $1, $3^2*$2,$4^2*$2,$5^2*$2, $3^2*$2+$4^2*$2, $2}' >> t.rw
      else
        grep $ss t.f | awk -v dur=$dur '{print $1,$2^2*dur,$3^2*dur,$4^2*dur,$2^2*dur+$3^2*dur,dur }' >! t.t
        grep $ss t.a | awk '{print $1, $3^2*$2,$4^2*$2,$5^2*$2, $3^2*$2+$4^2*$2, $2}' >> t.t
        sort -n -k 5 t.t | head -n 1 >> t.rw
      endif   
   end
#
#  Now take the weighted average of the values (weighting based on duration)
   awk -v m=$minrw '{w=w+$6} {ns = ns+$2*$6} {es=es+$3*$6} {us=us+$4*$6} {hs=hs+$5*$6} {nm = substr($1,1,4)} END {printf(" mar_neu %s %6.2fe-7 %6.2fe-7 %6.2fe-7 0.0 0.0 0.0 ! %6.3f HRW %6.2f yrs\n", nm, (ns/w+m)*10,(es/w+m)*10,(us/w+m)*10, hs/w, w)}' t.rw >> $orw
#
end
#
# OK Now create the use site list
set ous = "use_${oroot}.use"
if( $tsin == 'NONE' ) then
   echo "# Use site list generated from $vname "`date` >! $ous
else
   echo "# Use site list generated from tsfit summary $tsin "`date` >! $ous
endif
echo "# Minimum Horizontal RW process noise $maxuse mm^2/yr for site to be used" >> $ous
echo "  use_site clear" >> $ous
grep '^ ' $orw | awk -v m=$maxuse '{if( $10 < m ) {printf("  use_site %s \n",$2)}}' >> $ous
set num = `grep '^ ' $ous | grep -v clear | wc -l`
echo "There are $num sites used in $ous"

#
# Get the median Random walk value
set nrw = `grep HRW $orw | wc | awk '{print int($1/2)}'`
set median_rwn = `grep HRW $orw | sort -n -k 3 | tail -n +${nrw}  | head -1 | awk '{print $3}'`
set median_rwe = `grep HRW $orw | sort -n -k 4 | tail -n +${nrw}  | head -1 | awk '{print $4}'`
set median_rwu = `grep HRW $orw | sort -n -k 5 | tail -n +${nrw}  | head -1 | awk '{print $5}'`
echo $median_rwn $median_rwe $median_rwu | awk '{printf("* MEDIAN RW NEU %6.2fe-7 %6.2fe-7 %6.2fe-7  0.0 0.0 0.0  !  m^2/yr\n",$1*1.e7, $2*1e7, $3*1e7)}'  
echo $median_rwn $median_rwe $median_rwu | awk '{printf("* MEDIAN RW NEU %6.2fe-7 %6.2fe-7 %6.2fe-7  0.0 0.0 0.0  !  m^2/yr\n",$1*1.e7, $2*1e7, $3*1e7)}'  >> $orw

#
# OK Now generate the stab sites list
if( $stabrad == 0 ) then   # Old scheme
   set ost = "stab_${oroot}.stab"
   if( $tsin == 'NONE' ) then
      echo "# Use site list generated from $vname "`date` >! $ost
   else
      echo "# Use site list generated from tsfit summary $tsin "`date` >! $ost
   endif
   echo "# Minimum Horizontal RW process noise $maxstab mm^2/yr for site to be used" >> $ost
   echo "  stab_site clear" >> $ost
   grep '^ ' $orw | awk -v m=$maxstab '{if( $10 < m ) {printf("  stab_site %s \n",$2)}}' >> $ost
   set num = `grep '^ ' $ost | grep -v clear | wc -l`
   echo "There are $num stabilization sites in $ost"

else
# New algorithm to rank the sites
#  Start looping over a grid with the spacing selected
   awk '{printf(" %7.3f %7.3f %6.2f %s\n",57.295*$7/(6378137*cos($6/6378137)),57.295*$6/6378137,($3^2+$4^2)*$2,$0)}' t.a  | awk -v maxstab=$maxstab '{if ($3 < maxstab) {print $0}}' >! t.aa
   set minlng = `sort -n -k 1 t.aa | head -1 | awk '{print int($1)-1}'`
   set maxlng = `sort -n -k 1 t.aa | tail -n -1 | awk '{print int($1)+1}'`
   set minlat = `sort -n -k 2 t.aa | head -1 | awk '{print int($2)-1}'`
   set maxlat = `sort -n -k 2 t.aa | tail -n -1 | awk '{print int($2)+1}'`

   echo "STABRAD Long/Lat Ranges LNG $minlng $maxlng LAT  $minlat $maxlat deg"
   
   set dlat = `echo $stabrad | awk '{print int(($1/6371)*57.295)}'`  # Dlat in deg
   if ( $dlat == 0 ) then
       echo $stabrad too small
       exit
   endif
   set ost = "stab_${oroot}.stab"
   if( $tsin == 'NONE' ) then
      echo "# Use site list generated from $vname "`date` >! $ost
   else
      echo "# Use site list generated from tsfit summary $tsin "`date` >! $ost
   endif
   echo "# Minimum Horizontal RW process noise $maxstab mm^2/yr for site to be used" >> $ost
   echo "# Grouped sites: stabrad  $stabrad km"  >> $ost
   echo "# Range of grid: Long $minlng $maxlng Lat $minlat $maxlat Dlat $dlat"  >> $ost
   echo "  stab_site clear" >> $ost

#  Start looping on grid
   set lat = $minlat
   while ( $lat < $maxlat ) 
       set lat = `echo $lat $dlat | awk  '{printf("%6d",int($1+$2))}'`
       if( $lat < 90 ) then
          set dlng = `echo $lat $dlat | awk '{printf("%6d",int($2/cos($1/57.295)))}'`
          set lng = $minlng
          while ( $lng < $maxlng )
             set lng = `echo $lng $dlng | awk  '{printf("%6d",$1+$2)}'`
#
#            Now get all the sites with in the box around this coordinate
#            Find sites in BOX
             awk -v lng=$lng -v lat=$lat -v dlng=$dlng -v dlat=$dlat '{if( $1>lng-dlng && $1<=lng && $2>lat-dlat && $2<=lat) {print $0}}' t.aa >! t.box
             set nb = `wc -l t.box`
             if( $nb[1] > 0 ) then
#              echo "Lat Long " $lat $lng $nb
               sort -n -k 3 t.box | head -10 | awk '{if ( NR==1 ) {printf(" stab_site %s",substr($4,1,4))} else {printf("/%s",substr($4,1,4))}}'  >> $ost
               echo  $lng $lat $nb[1] | awk '{printf("         ! LL %3d %3d # %3d\n",$1,$2,$3)}' >> $ost
             endif
          end
       endif 
   end
endif 
           


  




    

