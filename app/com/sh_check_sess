#!/bin/csh -f
#
#doc Check either j-file, g-file or sp3 file to ensure session.info has the correct satellites
#doc
# 
# By pfang@ucsd.edu & murray@stanford.edu
# Last modified by R. King (M. Kogan change) 010927  
######################## INSTRUCTIONS #############################
if ( $#argv == 0 ) then
  echo "=========================================================================================="
  echo " Check either j-file, g-file or sp3 file to ensure session.info has the correct satellites"
  echo "  "
  echo "  USAGE :    sh_check_sess  -sess <doy> -type <type> -file <name> "
  echo "  "
  echo "          <doy> is the 3 char doy of the session to check"         
  echo "  "
  echo "          <type> file type to be checked (sp3, gfile or jfile)"         
  echo "  "
  echo "          <name> name of the orbit file to check against session.info"         
  echo "  "
  echo "  Examples :  " sh_check_sess -sess 281 -type gfile -file gigs96.281
  echo "              " sh_check_sess -sess 281 -type sp3 -file igs08741.sp3
  echo "              " sh_check_sess -sess 295 -type jfile -file jpgga6.295
  echo "=========================================================================================="
  exit
endif 
##################### SET UP DEFAULTS #############################   
set sess = 0
set type = ""
set file  = ""
set sess_prn = 0
set file_prn = 0
set svs_exclude = ""
set old_format = "no"
##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
       case -s:
	    case -sess:
                set sess       =  $input[2]
       breaksw 
       case -t:
	    case -type:
                set type     =   $input[2]
       breaksw
       case -f:
	    case -file:
                set file      =   $input[2]
       breaksw
  endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
##################### GET THE JOB DONE ###################### 
echo " "
echo "sh_check_sess: Removing any PRN's from session.info that are missing from: "$file

if (! -e $file) then
	echo missing input file: $file QUIT
	exit
endif
if (! -e session.info) then
	echo missing session.info file QUIT
	exit
endif
if ( $sess == 0 ) then
	echo 'missing session (-sess) specifier QUIT'
	exit
endif
if ( $type == "" ) then
	echo 'missing file type (-type) specifier QUIT'
	exit
endif 

set doy  =  ` cat session.info | awk '$2*1.0 == sn*1.0 {printf"%03d \n",$2}' sn=$sess `  
set year  =   ` cat session.info | awk '$2*1.0 == sn*1.0 {print $1}' sn=$sess`
set yr = `sh_year -year $year`
set old_format = ` cat session.info | awk '$2*1.0 == sn*1.0 && substr($0,1,1) != " " {print "yes"}' sn=$sess `  
set s_prn = ` cat session.info | awk '$2*1.0 == sn*1.0 {for (i=8;i<=NF;i++) {printf " %02d",$i}}' sn=$sess | sort -n`  >& /dev/null 

if ( $type == "gfile" ) then
  set f_prn = `sed -e "1,/END/ d" $file | grep PRN | awk '{printf " %02d",$2}' | sort -n`  >& /dev/null 
  if ( ${#f_prn} == 0 ) then  # New-style g-file (no lines beginning "PRN...")
    set f_prn = `grep '^[GRECI][ 0-9][ 0-9]' $file | awk '{printf " %02d",substr($0,2,2)}'` >& /dev/null
  endif

#  set f_prn = `sed -e "1,/END/ d" $file | grep PRN | awk '{printf "02d",$2}' | sort -n `
else if ( $type == "sp3" ) then
  set f_prn = `head -n 7 $file | tail -n -5 | cut -c10- | sed s/" 0"//g | awk '{for (i=1; i<=NF; i++) printf " %02d", $i}' | sort -n`  >& /dev/null
#  set f_prn = `head -n 7 $file | tail -n -5 | cut -c10- | sed s/" 0"//g | sort -n` 
else if ( $type == "jfile" ) then
  #set f_prn = `sed -e "1,3 d" $file | awk '{print $8}' | sort -n | uniq | awk '{printf " %02d",$1}'`  >& /dev/null 
#  set f_prn = `sed -e "1,3 d" $file | awk '{print $8}' | sort -n | awk '$1 != old {print $1*1; old = $1}'` 
  # Edited by MAF (2015-11-23, MIT) to accommodate alphabetic satellite system prefix to PRN number in j-file
  set f_prn = `awk '{if (NR > 3) print $8}' $file | tr -d '[:alpha:]' | sort -n -u | awk '{printf " %02d",$1}'` >& /dev/null
else 
  echo "Unknown orbit type: " $type
  exit
endif

# Get satellites to be excluded from the svs_exclude.dat file 
if ( -e svs_exclude.dat ) then 
# set svs_exclude = `awk 'substr($0,1,1) == " " {print $0}' svs_exclude.dat | grep $yr[1] | grep $doy | awk '{for (i=3; i<=NF; i++) printf " %02d", $i}'`
#  change by M. Kogan to avoid problem with confusion of day 001 with year 2001 
  set svs_exclude = `awk 'substr($0,1,1) == " " && $1 == var1 && $2 == var2 {print $0}' var1=$yr[1] var2=$doy svs_exclude.dat | awk '{for (i=3; i<=NF; i++) printf " %02d", $i}'`

  if ( $#svs_exclude > 0 ) echo "Excluding satellites found in svs_exclude.dat: "$svs_exclude ; echo "  " 
else
  echo "WARNING: Cannot find file svs_exclude.dat, check links  " 
endif
   
# Extract satellites in session.info and input file.
echo $s_prn | awk '{split($0,prns); n = NF} \
{for (i=1;i<=n;i++) {printf "%02d \n", prns[i]}}' | sort -n >! tmp.sprn
echo $f_prn | awk '{split($0,prns); n = NF} \
{for (i=1;i<=n;i++) {printf "%02d \n", prns[i]}}' | sort -n >! tmp.fprn

# Exclude any satellites found in the svs_exclude.dat file
if ( $#svs_exclude > 0 ) then
  if ( -e tmp.fprn1 ) \rm tmp.fprn1 ; touch tmp.fprn1
  foreach prn ( $svs_exclude )
    grep -v $prn tmp.fprn >> tmp.fprn1
    \mv tmp.fprn1 tmp.fprn
  end 
endif

# Make lists of satellites common and unique to session.info and the input file.
# sv's common to both files
set common_prn = `comm -12 tmp.sprn tmp.fprn`
# sv's only in first file
set sess_prn = `comm -23 tmp.sprn tmp.fprn`
# sv's only in second file
set file_prn = `comm -13 tmp.sprn tmp.fprn`
\rm tmp.sprn tmp.fprn

echo "PRN's in session.info: " $s_prn
echo "PRN's in "$file":   " $f_prn    
if ( $#sess_prn > 0 ) then
  echo "PRN: $sess_prn in original session.info. NOT in $file. EXCLUDING these satellites from session.info " 
endif
if ( $#file_prn > 0 ) then
   echo "PRN: $file_prn in $file. NOT in session.info. These satellites remain EXCLUDED from session.info " 
endif

if ( $old_format != "yes" ) then
  (echo $common_prn; cat session.info) | awk -v sess=$sess 'NR == 1 {split($0,prns); n = NF} \
  NR > 1 && $2 == sess {printf " %4d %3d   %2d       %3d    %5d     %2d %2d    ",$1,$2,$3,$4,$5,$6,$7; \
  for (i=1;i<=n;i++) printf "%3d",prns[i]; printf "\n"} \
  $2 != sess && NR > 1 {print}' >! session.info.new 
else
  (echo $common_prn; cat session.info) | awk -v sess=$sess 'NR == 1 {split($0,prns); n = NF} \
  NR > 1 && $2 == sess {printf "%2d %3d %2d %3d %4d       %2d %2d   ",$1,$2,$3,$4,$5,$6,$7; \
  for (i=1;i<=n;i++) printf "%3d",prns[i]; printf "\n"} \
  $2 != sess && NR > 1 {print}' >! session.info.new 
endif 

echo "  "
echo "Satellites written to session.info for session " $sess " are: "
echo $common_prn 
 
\cp  session.info session.info.old
\cp  session.info.new session.info 
\rm session.info.new    

exit
