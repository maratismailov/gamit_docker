      Subroutine rd_map_list

c     Read the header of a station file generated by Johannes Boehmn of IGG/Vienna 
c     for mapping function coefficients.  Currently coded for VMF1 only

c     Written by R. King  9 August 2006
c     using P. Tregoning code from old utils/interp_vmff.
c     Last modified by R. King 4 April 2007  
                      
      implicit none   

      include '../includes/grdtab.h'
      
c Input from grdtab.h
c   luprnt     i*4 unit number of print file ('grdtab.out')
c   lumaplg    i*4 unit number for station list file ('map.list')   
c   maxlsit    i*4 maximum number of sites allowed on station list file
      
      
c Output to grdtab.h                                         
c   nsitmapl             i*4  number of sites on station list file 
c   sites_map(maxlsit)   c*4  4-character codes for sites in file
c   crds_map(3,maxlsit)  r*4  lat,lon,ht (deg, m ) of sites in file
c   maplmod              c*8  mapping function model
c   nmapl                i*4  number of coefficients for each site and time


c  Local variables

      integer*4 ioerr,i
      character*4 type
      character*128 line,message 
      logical start,eos  
         
c This routine and get_map_list.f currently support only VMF1 files.
c The format is designed to accommodate the station and values files
c to be downloaded from   http://mars.hg.tuwien.ac.at/~ecmwf1/, with 
c minimal editing.
c
c The GAMIT map.list file has three parts:
c
c  1) A GAMIT-specific header line of the form
c
c VMF1 Formatted for GAMIT. Version  1.0  Interval  0.25   
c
c where VMF1 is in column 1, the version number in columns 35-38, and
c the epoch interval (in decimal days) in columns 50-55.  GAMIT currently 
c supports three versions, differing only in the number of values on each 
c line (see below).
c 
c   2) A list of stations and coordinates in the format of the Vienna station
c      files (e.g. gnss.ell).  These should be pasted into the map.list file
c      after the GAMIT header, preceded by *START STATIONS and ended by
c      *END STATIONS.
c
c   3) A list of mapping functiion and met values in the format of the Vienna
c      data files (e.g. y2002.vmf1_q), preceded by *START DATA and (optionally)
c      ended by *END DATA.
c                        
c   The 4-character site codes in 2) and 3) may be upper or lower case.
c
c   Comments may be imbedded between (but not within) these sections.  For clarity
c   they should have # in column 1, but this is not required by the program.
c
c Thus, the constructed file has the following form (V, #, etc. are in column 1):
c
c VMF1 Formatted for GAMIT. Version  1.0  Interval  0.25   
c #
c # IGS name      lat     lon   height
c #  
c *START STATONS
c aber        57.14  357.92   53.48
c acor        43.36  351.60   66.86
c ...   
c zwe2       55.70   36.76  272.00 12330   
c *END STATIONS
c # 
c # (any number of comment lines follow, ending with the first data entry with the
c #  station name beginning in column 1 and not # )
c #
c # Format:
c # A4 5X F9.2 1X F11.8 1X F11.8 1X F7.4 1X F7.4 1X F6.1 1X F8.2 1X F8.2 1X F6.2
c # IGS 4-letter name
c # mod. Julian date
c # hydr. coefficient ah
c # wet coefficient aw
c # hydrostatic zenith delay in m
c # wet zenith delay in m
c # Tmean (mean temp deg K)
c # pressure (hPa)
c # temp (deg C)
c # water vapour pressure (hPa)
c # orthometric height (m)
c #             
c *START DATA
c AIRA      54119.00  0.00124165  0.00046735  2.2642  0.0351  276.7   992.55    10.66   9.74  282.6
c AIRA      54119.25  0.00124027  0.00045887  2.2619  0.0361  276.1   991.48    10.47   9.91  282.6
c ..
c     
c LEBE      52532.50  0.00123663  0.00043052  2.0885  0.0585  279.9   915.62    13.10  10.90  890.7
c LEBE      52532.75  0.00123653  0.00043739  2.0852  0.0675  280.5   913.93    13.94  10.49  890.7
c         
c
c Version 0.5 has only four entries after the name and date: AH AW ZHD ZWD
c Version 1.0 has all but the last entry:                    AH AW ZHD ZWD Tm P T Pw  
c Version 1.1 has all of the entries shown:                  AH AW ZHD ZWD Tm P T Pw H

c Open the station list file
                         
      open(lumapl,file='map.list',iostat=ioerr,status='old')  
      if (ioerr.eq. 0 ) then    
         call report_stat('STATUS','GRDTAB','rd_map_list','map.list'
     .                   ,' Opened  mapping function table',0)  
      else
         call report_stat('FATAL','GRDTAB','rd_map_list','map.list'
     .      ,'Error opening mapping function table : ',ioerr)
      endif  
             
c Read the header to get the model type and version number   

      read(lumapl,'(a)',iostat=ioerr) line   
      if( ioerr.ne.0)  call report_stat('STATUS','GRDTAB','rd_map_list'
     .    ,'map.list','Error reading 1st line of mapping function table'
     .    , ioerr)
      read(line,'(a4)',iostat=ioerr) type
      if( ioerr.ne.0)  call report_stat('STATUS','GRDTAB','rd_map_list' 
     . ,'map.list','Error reading mapping function type',ioerr)
      if( type.eq.'VMF1' ) then 
        maplmod(1:4) = 'VMF1'   
        maplmod(5:8) = '    '
      else
        call report_stat('FATAL','GRDTAB','rd_map_list','map.list'
     .     ,'Mapping function table not VMF1, format unknown',0)
      endif   
      read(line(35:38),'(f4.1)',iostat=ioerr) maplver
      read(line(50:55),'(f6.3)',iostat=ioerr) mapl_int   

c Set the number of values according to the version

      if( maplver.eq.0.5 ) nmapl = 4
      if( maplver.eq.1.0 ) nmapl = 8
      if( maplver.eq.1.1 ) nmapl = 9


c Read in the stations included in the file and their coordinates

      if( maplver.ge.0.5 .and. maplver.le.1.1 ) then
c       find the start of the station list  
        start = .false.
        do while (.not.start)  
          read(lumapl,'(a)',iostat=ioerr) line
          if( ioerr.ne.0 ) call report_stat('FATAL','GRDTAB'
     .       ,'rd_map_list','map.list','Error reading line ',ioerr)
          if( line(1:14).eq.'*START STATION' ) start = .true.
        enddo
c       read in the stations and coordinates
        eos = .false.    
        nsitmap=0
        do while( .not.eos ) 
          read(lumapl,'(a)',iostat=ioerr) line  
          if( ioerr.ne.0 ) then
            call report_stat('FATAL','GRDTAB','rd_map_list','map.list'
     .                       ,'Error reading station line ',ioerr)
          elseif (line(1:13).eq.'*END STATIONS') then
            eos = .true.
          else
            read(line,'(a4,4x,3f8.2)',iostat=ioerr) 
     .        sites_map(nsitmap),(crds_map(i,nsitmap),i=1,3)  
              call uppers(sites_map(nsitmap))
            if( ioerr.ne.0 ) then
              call report_stat('FATAL','GRDTAB','rd_map_list','map.list'
     .                        ,'Error decoding station line ',ioerr)
            else
              nsitmap = nsitmap + 1
            endif
          endif
        enddo
            
      else  
        write(message,'(a,f4.1,a)') 'Mapping function table version ('
     .       ,maplver,' not known' 
        call report_stat('FATAL','GRDTAB','rd_map_list','map.list'
     .                 ,message,0)
      endif
      
      return 
      end
